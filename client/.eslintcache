[{"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\index.tsx":"1","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\reportWebVitals.ts":"2","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\stores\\store.ts":"3","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\layout\\App.tsx":"4","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\stores\\testStore.ts":"5","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\stores\\commonStore.ts":"6","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\stores\\patientStore.ts":"7","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\layout\\NavBar.tsx":"8","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\errors\\NotFound.tsx":"9","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\errors\\TestError.tsx":"10","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\errors\\ServerError.tsx":"11","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\stats\\CountryDashboard.tsx":"12","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\tests\\dashboard\\TestDashboard.tsx":"13","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\home\\HomePage.tsx":"14","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\patients\\dashboard\\PatientDashboard.tsx":"15","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\patients\\form\\PatientForm.tsx":"16","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\api\\agent.ts":"17","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\errors\\ValidationErrors.tsx":"18","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\stats\\CountryList.tsx":"19","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\layout\\LoadingComponent.tsx":"20","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\tests\\dashboard\\TestList.tsx":"21","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\patients\\dashboard\\PatientList.tsx":"22","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\tests\\details\\TestDetails.tsx":"23","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\tests\\form\\TestForm.tsx":"24","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\form\\MyTextInput.tsx":"25","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\form\\MyTextArea.tsx":"26","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\form\\MySelectInput.tsx":"27","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\options\\variationOptions.ts":"28","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\form\\MyDateInput.tsx":"29","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\models\\test.ts":"30","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\options\\genderOptions.ts":"31","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\patients\\details\\PatientDetails.tsx":"32"},{"size":966,"mtime":1621893954567,"results":"33","hashOfConfig":"34"},{"size":440,"mtime":1620430208848,"results":"35","hashOfConfig":"34"},{"size":549,"mtime":1621791015813,"results":"36","hashOfConfig":"34"},{"size":1523,"mtime":1621910339150,"results":"37","hashOfConfig":"34"},{"size":2791,"mtime":1621895246494,"results":"38","hashOfConfig":"34"},{"size":312,"mtime":1621791015772,"results":"39","hashOfConfig":"34"},{"size":3614,"mtime":1621908201474,"results":"40","hashOfConfig":"34"},{"size":976,"mtime":1621791015722,"results":"41","hashOfConfig":"34"},{"size":447,"mtime":1621791015821,"results":"42","hashOfConfig":"34"},{"size":2171,"mtime":1621791015845,"results":"43","hashOfConfig":"34"},{"size":646,"mtime":1621791015837,"results":"44","hashOfConfig":"34"},{"size":147,"mtime":1621791015879,"results":"45","hashOfConfig":"34"},{"size":1314,"mtime":1621791015912,"results":"46","hashOfConfig":"34"},{"size":3597,"mtime":1621791015871,"results":"47","hashOfConfig":"34"},{"size":1488,"mtime":1621907093885,"results":"48","hashOfConfig":"34"},{"size":2678,"mtime":1621910021267,"results":"49","hashOfConfig":"34"},{"size":3208,"mtime":1621910604742,"results":"50","hashOfConfig":"34"},{"size":441,"mtime":1621791015863,"results":"51","hashOfConfig":"34"},{"size":2291,"mtime":1621791015896,"results":"52","hashOfConfig":"34"},{"size":375,"mtime":1621518661718,"results":"53","hashOfConfig":"34"},{"size":1864,"mtime":1621895790431,"results":"54","hashOfConfig":"34"},{"size":1931,"mtime":1621907884069,"results":"55","hashOfConfig":"34"},{"size":1308,"mtime":1621895887696,"results":"56","hashOfConfig":"34"},{"size":3017,"mtime":1621901217109,"results":"57","hashOfConfig":"34"},{"size":641,"mtime":1621890035899,"results":"58","hashOfConfig":"34"},{"size":661,"mtime":1621890628873,"results":"59","hashOfConfig":"34"},{"size":930,"mtime":1621892450405,"results":"60","hashOfConfig":"34"},{"size":300,"mtime":1621898226255,"results":"61","hashOfConfig":"34"},{"size":875,"mtime":1621894136274,"results":"62","hashOfConfig":"34"},{"size":178,"mtime":1621898057682,"results":"63","hashOfConfig":"34"},{"size":111,"mtime":1621900012262,"results":"64","hashOfConfig":"34"},{"size":1633,"mtime":1621909407187,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"17xrftk",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"68"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"68"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"68"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"68"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\index.tsx",[],["137","138"],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\reportWebVitals.ts",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\stores\\store.ts",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\layout\\App.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\stores\\testStore.ts",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\stores\\commonStore.ts",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\stores\\patientStore.ts",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\layout\\NavBar.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\errors\\NotFound.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\errors\\TestError.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\errors\\ServerError.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\stats\\CountryDashboard.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\tests\\dashboard\\TestDashboard.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\home\\HomePage.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\patients\\dashboard\\PatientDashboard.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\patients\\form\\PatientForm.tsx",["139","140"],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\api\\agent.ts",["141"],"import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Country } from \"../models/country\";\r\nimport { Patient } from \"../models/patient\";\r\nimport { Test } from \"../models/test\";\r\nimport { history } from \"../../index\";\r\nimport { storeAnnotation } from \"mobx/dist/internal\";\r\nimport { store } from \"../stores/store\";\r\n\r\nconst sleep = (delay: number) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, delay);\r\n  });\r\n};\r\n\r\naxios.defaults.baseURL = \"http://localhost:5000/api\";\r\n\r\naxios.interceptors.response.use(\r\n  async (response) => {\r\n    // try {\r\n    await sleep(700);\r\n    return response;\r\n  },\r\n  (error: AxiosError) => {\r\n    const { data, status, config } = error.response!;\r\n\r\n    switch (status) {\r\n      case 400:\r\n        if (typeof data === \"string\") {\r\n          toast.error(data);\r\n        }\r\n\r\n        if (config.method === \"get\" && data.errors.hasOwnProperty(\"id\")) {\r\n          history.push(\"/not-found\");\r\n        }\r\n\r\n        if (data.errors) {\r\n          const modalStateErrors = [];\r\n\r\n          for (const error in data.errors) {\r\n            if (data.errors[error]) {\r\n              modalStateErrors.push(data.errors[error]);\r\n            }\r\n          }\r\n\r\n          throw modalStateErrors.flat();\r\n        }\r\n\r\n        break;\r\n      case 401:\r\n        toast.error(\"unauthorized\");\r\n        break;\r\n      case 404:\r\n        history.push(\"not-found\");\r\n        break;\r\n      case 500:\r\n        store.commonStore.setServerError(data);\r\n        history.push(\"/server-error\");\r\n        break;\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n  get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n  post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n  put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n  del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n};\r\n\r\nconst Tests = {\r\n  list: () => requests.get<Test[]>(\"/tests\"),\r\n  details: (id: string) => requests.get<Test>(`/tests/${id}`),\r\n  create: (test: Test) => axios.post<void>(\"/tests\", test),\r\n  update: (test: Test) => axios.put<void>(`/tests/${test.id}`, test),\r\n  delete: (id: string) => axios.delete<void>(`/tests/${id}`),\r\n};\r\n\r\nconst Countries = {\r\n  list: () => requests.get<Country[]>(\"/countries\"),\r\n  details: (id: string) => requests.get<Country>(`/countries/${id}`),\r\n  create: (country: Country) => axios.post<void>(\"/countries\", country),\r\n  update: (country: Country) =>\r\n    axios.put<void>(`/countries/${country.id}`, test),\r\n  delete: (id: string) => axios.delete<void>(`/countries/${id}`),\r\n};\r\n\r\nconst Patients = {\r\n  list: () => requests.get<Patient[]>(\"/patients\"),\r\n  details: (id: string) => requests.get<Patient>(`/patients/${id}`),\r\n  create: (patient: Patient) => axios.post<void>(\"/patients\", patient),\r\n  update: (patient: Patient) => axios.put<void>(`/patients/${patient.id}`, patient),\r\n  delete: (id: string) => axios.delete<void>(`/patients/${id}`),\r\n};\r\n\r\nconst agent = {\r\n  Tests,\r\n  Countries,\r\n  Patients,\r\n};\r\n\r\nexport default agent;\r\n","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\errors\\ValidationErrors.tsx",["142"],"import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n  errors: string[] | null;\r\n}\r\n\r\nexport default function ValidationError({ errors }: Props) {\r\n  return (\r\n    <Message error>\r\n      {errors && (\r\n        <Message.List>\r\n          {errors.map((err: any, i) => {\r\n            <Message.Item key={i}>{err}</Message.Item>;\r\n          })}\r\n        </Message.List>\r\n      )}\r\n    </Message>\r\n  );\r\n}\r\n","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\stats\\CountryList.tsx",["143"],"import React, { useEffect, useState } from \"react\";\r\nimport { Item, Statistic } from \"semantic-ui-react\";\r\nimport agent from \"../../app/api/agent\";\r\nimport { Country } from \"../../app/models/country\";\r\n\r\nexport default function CountryList() {\r\n  const [countries, setCountries] = useState<Country[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // if (loading) return <LoadingComponent content=\"Loading app\" />;\r\n\r\n  useEffect(() => {\r\n    agent.Countries.list().then((response) => {\r\n      let countries: Country[] = [];\r\n      response.forEach((country) => {\r\n        // test.date = test.date.split(\"T\")[0];\r\n        countries.push(country);\r\n      });\r\n      setCountries(countries);\r\n      setLoading(false);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Item.Group divided>\r\n      {countries.map((country) => (\r\n        <Item key={country.id}>\r\n          <Item.Content>\r\n            <Item.Header as=\"a\">{country.name}</Item.Header>\r\n            <Item.Description>\r\n              <Statistic>\r\n                <Statistic.Value>{country.infections}</Statistic.Value>\r\n                <Statistic.Label>Infektime</Statistic.Label>\r\n              </Statistic>\r\n              <Statistic>\r\n                <Statistic.Value>{country.deaths}</Statistic.Value>\r\n                <Statistic.Label>Vdekje</Statistic.Label>\r\n              </Statistic>\r\n              <Statistic>\r\n                <Statistic.Value>{country.recoveries}</Statistic.Value>\r\n                <Statistic.Label>Rikuperime</Statistic.Label>\r\n              </Statistic>\r\n              <Statistic>\r\n                <Statistic.Value>{country.vaccinated}</Statistic.Value>\r\n                <Statistic.Label>Vaksinime</Statistic.Label>\r\n              </Statistic>\r\n\r\n              {/* <div>Infections: {country.infections}</div>\r\n              <div>Deaths: {country.deaths}</div>\r\n              <div>Recoveries: {country.recoveries}</div>\r\n              <div>Vaccinated: {country.vaccinated}</div> */}\r\n            </Item.Description>\r\n            <Item.Extra>\r\n              {/* <Button floated=\"right\" content=\"View\" color=\"blue\" />\r\n                <Button floated=\"right\" content=\"Delete\" color=\"red\" /> */}\r\n            </Item.Extra>\r\n          </Item.Content>\r\n        </Item>\r\n      ))}\r\n    </Item.Group>\r\n  );\r\n}\r\n","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\layout\\LoadingComponent.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\tests\\dashboard\\TestList.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\patients\\dashboard\\PatientList.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\tests\\details\\TestDetails.tsx",["144"],"import { format } from \"date-fns\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Card, Image } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default function TestDetails() {\r\n  const { testStore } = useStore();\r\n  const { selectedTest: test, openForm, cancelSelectedTest } = testStore;\r\n\r\n  if (!test) return <LoadingComponent />;\r\n\r\n  return (\r\n    <Card fluid>\r\n      <Image src={`/assets/categoryImages/${test.variation}.jpg`} />\r\n      <Card.Content>\r\n        <Card.Header>{test.description}</Card.Header>\r\n        <Card.Meta>\r\n          <span>{format (test.date!, 'dd.MM.yyyy, (h:mm aa)')}</span>\r\n        </Card.Meta>\r\n        <Card.Description>{test.description}</Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <Button.Group widths=\"2\">\r\n          <Button \r\n            onClick={() => openForm(test.id)}\r\n            basic\r\n            color=\"blue\"\r\n            content=\"Edit\"\r\n          />\r\n          <Button \r\n            onClick={cancelSelectedTest}\r\n            basic\r\n            color=\"grey\"\r\n            content=\"Cancel\"\r\n          />\r\n        </Button.Group>\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n}\r\n","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\tests\\form\\TestForm.tsx",["145","146"],"import { Formik, Form, ErrorMessage, validateYupSchema } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { useState } from \"react\";\r\nimport { Button, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport * as Yup from  'yup';\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport { variationOptions } from \"../../../app/common/options/variationOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { Test } from \"../../../app/models/test\";\r\n\r\nexport default observer(function TestForm() {\r\n  const { testStore } = useStore();\r\n  const { selectedTest, closeForm, createTest, updateTest, loading } =\r\n    testStore;\r\n\r\n  const initialState = selectedTest ?? {\r\n    id: \"\",\r\n    patientId: 0,\r\n    date: null,\r\n    description: \"\",\r\n    hospitalId: 0,\r\n    vaccineId: 0,\r\n    variation: \"\",\r\n  };\r\n\r\n  const validationSchema=Yup.object({\r\n  \r\n    patientId: Yup.number().required(),\r\n    date: Yup.string().required('Ju lutem vendosni nje date').nullable(),\r\n    description: Yup.string().required(),\r\n    hospitalId: Yup.number().required(),\r\n    vaccineId: Yup.number().required(),\r\n    variation: Yup.string().required()\r\n  })\r\n  const [test] = useState(initialState);\r\n\r\n  function handleFormSubmit(test: Test) {\r\n     test.id ? updateTest(test) : createTest(test);\r\n   }\r\n\r\n  \r\n\r\n  return (\r\n    <Segment clearing>\r\n      <Formik \r\n      validationSchema={validationSchema}\r\n      enableReinitialize \r\n      initialValues={test} \r\n      onSubmit={values =>  handleFormSubmit(values)}>        \r\n      {({handleSubmit, isValid, isSubmitting, dirty}) => (\r\n          <Form className='ui form' onSubmit={handleSubmit}>\r\n            <MyTextInput name='patientId' placeholder='PatientID'/>\r\n        <MyDateInput\r\n          placeholderText=\"Date\"\r\n          name=\"date\"\r\n          showTimeSelect\r\n          timeCaption='time'\r\n          dateFormat='dd.MM.yyyy, (h:mm aa)'\r\n        />\r\n       \r\n        <MyTextArea rows={3}\r\n          placeholder=\"Description\"\r\n          name=\"description\"\r\n        />\r\n     \r\n          <MyTextInput\r\n            placeholder=\"Hospital ID\"\r\n            name=\"hospitalId\"\r\n          />\r\n          <MyTextInput\r\n            placeholder=\"Vaccine ID\"\r\n            name=\"vaccineId\"\r\n          />\r\n        <MySelectInput options={variationOptions}\r\n          placeholder=\"Variation\"\r\n          name=\"variation\"\r\n        />\r\n        <Button\r\n        disabled={isSubmitting || !dirty || !isValid}\r\n          loading={loading}\r\n          floated=\"right\"\r\n          positive\r\n          type=\"submit\"\r\n          content=\"Submit\"\r\n        />\r\n        <Button\r\n          onClick={closeForm}\r\n          floated=\"right\"\r\n          type=\"button\"\r\n          content=\"Cancel\"\r\n        />\r\n</Form>\r\n        )}\r\n        </Formik>\r\n    </Segment>\r\n  );\r\n});\r\n","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\form\\MyTextInput.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\form\\MyTextArea.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\form\\MySelectInput.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\options\\variationOptions.ts",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\form\\MyDateInput.tsx",["147"],"import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\ninterface Props{\r\n    placeholder: string;\r\n    name:string;\r\n    label?: string;\r\n    \r\n}\r\n\r\n\r\n\r\nexport default function MyDateInput(props: Partial <ReactDatePickerProps>){\r\n    const [field, meta, helpers]=useField(props.name!);\r\n    return(\r\n\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n            {...field}\r\n            {...props}\r\n            selected={(field.value && new Date(field.value)) || null}\r\n            onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n\r\n   \r\n}","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\models\\test.ts",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\options\\genderOptions.ts",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\patients\\details\\PatientDetails.tsx",["148","149"],{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","severity":1,"message":"155","line":9,"column":24,"nodeType":"156","messageId":"157","endLine":9,"endColumn":36},{"ruleId":"154","severity":1,"message":"158","line":9,"column":38,"nodeType":"156","messageId":"157","endLine":9,"endColumn":55},{"ruleId":"154","severity":1,"message":"159","line":7,"column":10,"nodeType":"156","messageId":"157","endLine":7,"endColumn":25},{"ruleId":"160","severity":1,"message":"161","line":13,"column":37,"nodeType":"162","messageId":"163","endLine":13,"endColumn":39},{"ruleId":"154","severity":1,"message":"164","line":8,"column":10,"nodeType":"156","messageId":"157","endLine":8,"endColumn":17},{"ruleId":"154","severity":1,"message":"165","line":3,"column":10,"nodeType":"156","messageId":"157","endLine":3,"endColumn":14},{"ruleId":"154","severity":1,"message":"155","line":1,"column":24,"nodeType":"156","messageId":"157","endLine":1,"endColumn":36},{"ruleId":"154","severity":1,"message":"158","line":1,"column":38,"nodeType":"156","messageId":"157","endLine":1,"endColumn":55},{"ruleId":"154","severity":1,"message":"166","line":6,"column":11,"nodeType":"156","messageId":"157","endLine":6,"endColumn":16},{"ruleId":"154","severity":1,"message":"165","line":3,"column":10,"nodeType":"156","messageId":"157","endLine":3,"endColumn":14},{"ruleId":"154","severity":1,"message":"167","line":4,"column":24,"nodeType":"156","messageId":"157","endLine":4,"endColumn":29},"no-native-reassign",["168"],"no-negated-in-lhs",["169"],"@typescript-eslint/no-unused-vars","'ErrorMessage' is defined but never used.","Identifier","unusedVar","'validateYupSchema' is defined but never used.","'storeAnnotation' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'loading' is assigned a value but never used.","'Link' is defined but never used.","'Props' is defined but never used.","'Image' is defined but never used.","no-global-assign","no-unsafe-negation"]