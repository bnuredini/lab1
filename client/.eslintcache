[{"/home/bleart/projects/lab1/client/src/index.tsx":"1","/home/bleart/projects/lab1/client/src/reportWebVitals.ts":"2","/home/bleart/projects/lab1/client/src/app/stores/store.ts":"3","/home/bleart/projects/lab1/client/src/app/layout/App.tsx":"4","/home/bleart/projects/lab1/client/src/app/stores/modalStore.ts":"5","/home/bleart/projects/lab1/client/src/app/stores/commonStore.ts":"6","/home/bleart/projects/lab1/client/src/app/stores/patientStore.ts":"7","/home/bleart/projects/lab1/client/src/app/stores/testStore.ts":"8","/home/bleart/projects/lab1/client/src/app/stores/userStore.ts":"9","/home/bleart/projects/lab1/client/src/app/layout/NavBar.tsx":"10","/home/bleart/projects/lab1/client/src/app/layout/LoadingComponent.tsx":"11","/home/bleart/projects/lab1/client/src/errors/TestError.tsx":"12","/home/bleart/projects/lab1/client/src/errors/NotFound.tsx":"13","/home/bleart/projects/lab1/client/src/errors/ServerError.tsx":"14","/home/bleart/projects/lab1/client/src/features/users/LoginForm.tsx":"15","/home/bleart/projects/lab1/client/src/features/stats/CountryDashboard.tsx":"16","/home/bleart/projects/lab1/client/src/features/home/HomePage.tsx":"17","/home/bleart/projects/lab1/client/src/features/users/LoginPage.tsx":"18","/home/bleart/projects/lab1/client/src/features/tests/dashboard/TestDashboard.tsx":"19","/home/bleart/projects/lab1/client/src/features/patients/dashboard/PatientDashboard.tsx":"20","/home/bleart/projects/lab1/client/src/features/patients/form/PatientForm.tsx":"21","/home/bleart/projects/lab1/client/src/app/common/modals/ModalContainer.tsx":"22","/home/bleart/projects/lab1/client/src/Stats.tsx":"23","/home/bleart/projects/lab1/client/src/app/api/agent.ts":"24","/home/bleart/projects/lab1/client/src/features/users/RegisterForm.tsx":"25","/home/bleart/projects/lab1/client/src/errors/ValidationErrors.tsx":"26","/home/bleart/projects/lab1/client/src/app/common/options/genderOptions.ts":"27","/home/bleart/projects/lab1/client/src/features/stats/CountryList.tsx":"28","/home/bleart/projects/lab1/client/src/features/patients/dashboard/PatientList.tsx":"29","/home/bleart/projects/lab1/client/src/features/tests/dashboard/TestList.tsx":"30","/home/bleart/projects/lab1/client/src/app/common/form/MyTextInput.tsx":"31","/home/bleart/projects/lab1/client/src/app/common/form/MySelectInput.tsx":"32","/home/bleart/projects/lab1/client/src/app/common/form/MyDateInput.tsx":"33","/home/bleart/projects/lab1/client/src/features/tests/details/TestDetails.tsx":"34","/home/bleart/projects/lab1/client/src/features/patients/details/PatientDetails.tsx":"35","/home/bleart/projects/lab1/client/src/features/tests/form/TestForm.tsx":"36","/home/bleart/projects/lab1/client/src/features/covcomponents/CountryList.tsx":"37","/home/bleart/projects/lab1/client/src/features/covcomponents/GlobalInfo.tsx":"38","/home/bleart/projects/lab1/client/src/app/common/options/variationOptions.ts":"39","/home/bleart/projects/lab1/client/src/app/common/form/MyTextArea.tsx":"40"},{"size":939,"mtime":1622056564899,"results":"41","hashOfConfig":"42"},{"size":425,"mtime":1622056564899,"results":"43","hashOfConfig":"42"},{"size":715,"mtime":1622056564895,"results":"44","hashOfConfig":"42"},{"size":2346,"mtime":1622204689660,"results":"45","hashOfConfig":"42"},{"size":448,"mtime":1622056564895,"results":"46","hashOfConfig":"42"},{"size":742,"mtime":1622056564895,"results":"47","hashOfConfig":"42"},{"size":3472,"mtime":1622056564895,"results":"48","hashOfConfig":"42"},{"size":2669,"mtime":1622053260092,"results":"49","hashOfConfig":"42"},{"size":1387,"mtime":1622056564895,"results":"50","hashOfConfig":"42"},{"size":2892,"mtime":1622205410052,"results":"51","hashOfConfig":"42"},{"size":357,"mtime":1622053241860,"results":"52","hashOfConfig":"42"},{"size":2091,"mtime":1622053315882,"results":"53","hashOfConfig":"42"},{"size":428,"mtime":1622053314406,"results":"54","hashOfConfig":"42"},{"size":626,"mtime":1622053266672,"results":"55","hashOfConfig":"42"},{"size":1617,"mtime":1622056564899,"results":"56","hashOfConfig":"42"},{"size":141,"mtime":1621953958648,"results":"57","hashOfConfig":"42"},{"size":8032,"mtime":1622230086727,"results":"58","hashOfConfig":"42"},{"size":1644,"mtime":1622056564899,"results":"59","hashOfConfig":"42"},{"size":1270,"mtime":1621953958648,"results":"60","hashOfConfig":"42"},{"size":1170,"mtime":1622056564895,"results":"61","hashOfConfig":"42"},{"size":2570,"mtime":1622056564895,"results":"62","hashOfConfig":"42"},{"size":454,"mtime":1622056564891,"results":"63","hashOfConfig":"42"},{"size":1171,"mtime":1622203146938,"results":"64","hashOfConfig":"42"},{"size":3534,"mtime":1622056564887,"results":"65","hashOfConfig":"42"},{"size":2076,"mtime":1622056564899,"results":"66","hashOfConfig":"42"},{"size":414,"mtime":1622056564895,"results":"67","hashOfConfig":"42"},{"size":114,"mtime":1622056564891,"results":"68","hashOfConfig":"42"},{"size":2229,"mtime":1621953958648,"results":"69","hashOfConfig":"42"},{"size":1832,"mtime":1622056564895,"results":"70","hashOfConfig":"42"},{"size":1810,"mtime":1622049832357,"results":"71","hashOfConfig":"42"},{"size":596,"mtime":1622056564891,"results":"72","hashOfConfig":"42"},{"size":828,"mtime":1622056564887,"results":"73","hashOfConfig":"42"},{"size":794,"mtime":1622056564887,"results":"74","hashOfConfig":"42"},{"size":1266,"mtime":1622049832357,"results":"75","hashOfConfig":"42"},{"size":1580,"mtime":1622049832353,"results":"76","hashOfConfig":"42"},{"size":2965,"mtime":1622203146938,"results":"77","hashOfConfig":"42"},{"size":1034,"mtime":1622203146938,"results":"78","hashOfConfig":"42"},{"size":632,"mtime":1622203146938,"results":"79","hashOfConfig":"42"},{"size":303,"mtime":1622056564891,"results":"80","hashOfConfig":"42"},{"size":597,"mtime":1622056564891,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"11f68r5",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"84"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"84"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"84"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"84"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"84"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"84"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"84"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"84"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"84"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"/home/bleart/projects/lab1/client/src/index.tsx",[],["172","173"],"/home/bleart/projects/lab1/client/src/reportWebVitals.ts",[],"/home/bleart/projects/lab1/client/src/app/stores/store.ts",[],"/home/bleart/projects/lab1/client/src/app/layout/App.tsx",[],"/home/bleart/projects/lab1/client/src/app/stores/modalStore.ts",[],"/home/bleart/projects/lab1/client/src/app/stores/commonStore.ts",[],"/home/bleart/projects/lab1/client/src/app/stores/patientStore.ts",[],"/home/bleart/projects/lab1/client/src/app/stores/testStore.ts",[],"/home/bleart/projects/lab1/client/src/app/stores/userStore.ts",[],"/home/bleart/projects/lab1/client/src/app/layout/NavBar.tsx",["174","175"],"import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { Button, Container, Menu, Image, Dropdown } from \"semantic-ui-react\";\nimport LoginForm from \"../../features/users/LoginForm\";\nimport RegisterForm from \"../../features/users/RegisterForm\";\nimport modalStore from \"../stores/modalStore\";\nimport { useStore } from \"../stores/store\";\n// @ts-ignore\nimport Avatar from \"boring-avatars\";\n\nexport default observer(function NavBar() {\n  const { userStore, modalStore } = useStore();\n  const {\n    userStore: { user, logout },\n  } = useStore();\n\n  return (\n    <Menu pointing widths={10}>\n      <Container>\n        <Menu.Item as={NavLink} to=\"/\" exact>\n          <img\n            src=\"/assets/logo.png\"\n            alt=\"logo\"\n            style={{ marginRight: \"5px\" }}\n          />\n        </Menu.Item>\n        <Menu.Item as={NavLink} to=\"/tests\" name=\"Testet\" exact />\n        <Menu.Item as={NavLink} to=\"/stats\" name=\"Statistikat\" />\n        <Menu.Item as={NavLink} to=\"/patients\" name=\"Pacientet\" />\n        <Menu.Item as={NavLink} to=\"/errors\" name=\"Errors\" />\n        <Menu.Item name=\"Profili\" />\n        <Menu.Item position={\"right\"}></Menu.Item>\n        <Menu.Item position=\"right\">\n          {userStore.isLoggedIn ? (\n            <>\n              {/* <Image\n                src={user?.image || \"/assets/user.png\"}\n                avatar\n                spaced=\"right\"\n              /> */}\n              <Avatar\n                size={40}\n                name={user?.displayName}\n                variant=\"beam\"\n                colors={[\"#69D2E7\", \"#A7DBD8\", \"#E0E4CC\", \"#F38630\", \"#FA6900\"]}\n                style={{ marginRight: \".5rem\" }}\n              />\n              <Dropdown pointing=\"top left\" text={user?.displayName}>\n                <Dropdown.Menu>\n                  <Dropdown.Item\n                    as={Link}\n                    to={`/profile/${user?.username}`}\n                    text=\"My Profile\"\n                    icon=\"user\"\n                    style={{ marginRight: \"2rem\" }}\n                  />\n                  <Dropdown.Item onClick={logout} text=\"Logout\" icon=\"power\" />\n                </Dropdown.Menu>\n              </Dropdown>\n            </>\n          ) : (\n            <div></div>\n          )}\n          {userStore.isLoggedIn ? (\n            <div></div>\n          ) : (\n            <>\n              <Button\n                onClick={() => modalStore.openModal(<LoginForm />)}\n                inverted\n                style={{ margin: \"0rem 1rem\" }}\n              >\n                Kycu\n              </Button>\n              <Button\n                onClick={() => modalStore.openModal(<RegisterForm />)}\n                inverted\n              >\n                Registrohu\n              </Button>\n            </>\n          )}\n        </Menu.Item>\n      </Container>\n    </Menu>\n  );\n});\n","/home/bleart/projects/lab1/client/src/app/layout/LoadingComponent.tsx",[],"/home/bleart/projects/lab1/client/src/errors/TestError.tsx",[],"/home/bleart/projects/lab1/client/src/errors/NotFound.tsx",[],"/home/bleart/projects/lab1/client/src/errors/ServerError.tsx",[],"/home/bleart/projects/lab1/client/src/features/users/LoginForm.tsx",[],"/home/bleart/projects/lab1/client/src/features/stats/CountryDashboard.tsx",[],"/home/bleart/projects/lab1/client/src/features/home/HomePage.tsx",[],"/home/bleart/projects/lab1/client/src/features/users/LoginPage.tsx",[],"/home/bleart/projects/lab1/client/src/features/tests/dashboard/TestDashboard.tsx",[],"/home/bleart/projects/lab1/client/src/features/patients/dashboard/PatientDashboard.tsx",[],"/home/bleart/projects/lab1/client/src/features/patients/form/PatientForm.tsx",["176"],"import { observer } from \"mobx-react-lite\";\nimport React, {useState } from \"react\";\nimport { Button,Segment } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport * as Yup from  'yup';\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\nimport { Formik, Form, ErrorMessage} from \"formik\";\nimport { genderOptions } from \"../../../app/common/options/genderOptions\";\nimport { Patient } from \"../../../app/models/patient\";\n\nexport default observer(function PatientForm() {\n  const { patientStore } = useStore();\n  const { createPatient, selectedPatient, closeForm, updatePatient, loading} = patientStore;\n   \n  \n  const initialState = selectedPatient ?? {\n    id: \"\",\n    full_Name: \"\",\n    birthday: null,\n    gender: \"\",\n    phone_Number:0,\n    email: \"\",\n    address:\"\",\n    \n  };\n\n  const validationSchema=Yup.object({\n  \n    full_Name: Yup.string().required(),\n    birthday: Yup.string().required('Ju lutem vendosni ditelindjen').nullable(),\n    gender: Yup.string().required(),\n    phone_Number: Yup.number().required(),\n    email: Yup.string().required(),\n    address: Yup.string().required()\n    \n  })\n  const [patient] = useState(initialState);\n\n  function handleFormSubmit(patient: Patient) {\n     patient.id ? updatePatient(patient) : createPatient(patient);\n   }\n\n\n  return (\n    <Segment clearing>\n      <Formik \n      validationSchema={validationSchema}\n      enableReinitialize\n      initialValues={patient}\n      onSubmit={values => handleFormSubmit(values)}>\n        {({handleSubmit, isValid, isSubmitting, dirty}) =>(\n    <Form  className='ui form' onSubmit={handleSubmit} >\n<MyTextInput  name=\"Emri dhe Mbiemri\" placeholder=\"Full_Name\"/>\n<MyDateInput\n          placeholderText=\"Ditelindja\"\n          name=\"date\"\n          showTimeSelect\n          timeCaption='time'\n          dateFormat='dd.MM.yyyy, (h:mm aa)'\n        />\n<MySelectInput options={genderOptions} placeholder=\"Gjinia\" name=\"gender\"/>\n<MyTextInput placeholder=\"Numri i telefonit\" name=\"phone_Number\"/>\n<MyTextInput placeholder=\"Email-i\" name=\"email\"/>\n<MyTextInput\n  placeholder=\"Adresa\" name=\"address\"/>\n<Button\ndisabled={isSubmitting || !dirty || !isValid}\n  loading={loading}\n  floated=\"right\"\n  positive\n  type=\"submit\"\n  content=\"Submit\"\n/>\n<Button\n onClick={closeForm}\n  to=\"/patients\"\n  floated=\"right\"\n  type=\"button\"\n  content=\"Cancel\"\n/>\n</Form>\n        )}\n      </Formik>\n      \n    </Segment>\n  );\n});\n","/home/bleart/projects/lab1/client/src/app/common/modals/ModalContainer.tsx",[],"/home/bleart/projects/lab1/client/src/Stats.tsx",[],"/home/bleart/projects/lab1/client/src/app/api/agent.ts",[],"/home/bleart/projects/lab1/client/src/features/users/RegisterForm.tsx",["177"],"import { ErrorMessage, Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Button, Header, Label } from \"semantic-ui-react\";\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\nimport { useStore } from \"../../app/stores/store\";\nimport * as Yup from \"yup\";\n// import ValidationErrors from '../../errors/ValidationErrors';\nimport ValidationError from \"../../errors/ValidationErrors\";\n\nexport default observer(function RegisterForm() {\n  const { userStore } = useStore();\n  return (\n    <Formik\n      initialValues={{\n        displayName: \"\",\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        error: null,\n      }}\n      onSubmit={(values, { setErrors }) =>\n        userStore.register(values).catch((error) => setErrors({ error }))\n      }\n      validationSchema={Yup.object({\n        displayName: Yup.string().required(),\n        username: Yup.string().required(),\n        email: Yup.string().required().email(),\n        password: Yup.string().required(),\n      })}\n    >\n      {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\n        <Form\n          className=\"ui form error\"\n          onSubmit={handleSubmit}\n          autoComplete=\"off\"\n        >\n          <Header\n            as=\"h2\"\n            content=\"Sign up ne Shneta\"\n            color=\"teal\"\n            textAlign=\"center\"\n          />\n          <MyTextInput name=\"displayName\" placeholder=\"Display Name\" />\n          <MyTextInput name=\"username\" placeholder=\"Username\" />\n          <MyTextInput name=\"email\" placeholder=\"Email\" />\n          <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\" />\n          <ErrorMessage\n            name=\"error\"\n            render={() => <ValidationError errors={errors.error} />}\n          />\n          <Button\n            disabled={!isValid || !dirty || isSubmitting}\n            loading={isSubmitting}\n            positive\n            content=\"Regjistrohu\"\n            type=\"submit\"\n            fluid\n          />\n        </Form>\n      )}\n    </Formik>\n  );\n});\n","/home/bleart/projects/lab1/client/src/errors/ValidationErrors.tsx",["178"],"import React from \"react\";\nimport { Message } from \"semantic-ui-react\";\n\ninterface Props {\n  errors: any;\n}\n\nexport default function ValidationError({ errors }: Props) {\n  return (\n    <Message error>\n      {errors && (\n        <Message.List>\n          {errors.map((err: any, i: any) => {\n            <Message.Item key={i}>{err}</Message.Item>;\n          })}\n        </Message.List>\n      )}\n    </Message>\n  );\n}\n","/home/bleart/projects/lab1/client/src/app/common/options/genderOptions.ts",[],"/home/bleart/projects/lab1/client/src/features/stats/CountryList.tsx",["179"],"import React, { useEffect, useState } from \"react\";\nimport { Item, Statistic } from \"semantic-ui-react\";\nimport agent from \"../../app/api/agent\";\nimport { Country } from \"../../app/models/country\";\n\nexport default function CountryList() {\n  const [countries, setCountries] = useState<Country[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  // if (loading) return <LoadingComponent content=\"Loading app\" />;\n\n  useEffect(() => {\n    agent.Countries.list().then((response) => {\n      let countries: Country[] = [];\n      response.forEach((country) => {\n        // test.date = test.date.split(\"T\")[0];\n        countries.push(country);\n      });\n      setCountries(countries);\n      setLoading(false);\n    });\n  }, []);\n\n  return (\n    <Item.Group divided>\n      {countries.map((country) => (\n        <Item key={country.id}>\n          <Item.Content>\n            <Item.Header as=\"a\">{country.name}</Item.Header>\n            <Item.Description>\n              <Statistic>\n                <Statistic.Value>{country.infections}</Statistic.Value>\n                <Statistic.Label>Infektime</Statistic.Label>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>{country.deaths}</Statistic.Value>\n                <Statistic.Label>Vdekje</Statistic.Label>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>{country.recoveries}</Statistic.Value>\n                <Statistic.Label>Rikuperime</Statistic.Label>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>{country.vaccinated}</Statistic.Value>\n                <Statistic.Label>Vaksinime</Statistic.Label>\n              </Statistic>\n\n              {/* <div>Infections: {country.infections}</div>\n              <div>Deaths: {country.deaths}</div>\n              <div>Recoveries: {country.recoveries}</div>\n              <div>Vaccinated: {country.vaccinated}</div> */}\n            </Item.Description>\n            <Item.Extra>\n              {/* <Button floated=\"right\" content=\"View\" color=\"blue\" />\n                <Button floated=\"right\" content=\"Delete\" color=\"red\" /> */}\n            </Item.Extra>\n          </Item.Content>\n        </Item>\n      ))}\n    </Item.Group>\n  );\n}\n","/home/bleart/projects/lab1/client/src/features/patients/dashboard/PatientList.tsx",[],"/home/bleart/projects/lab1/client/src/features/tests/dashboard/TestList.tsx",[],"/home/bleart/projects/lab1/client/src/app/common/form/MyTextInput.tsx",[],"/home/bleart/projects/lab1/client/src/app/common/form/MySelectInput.tsx",[],"/home/bleart/projects/lab1/client/src/app/common/form/MyDateInput.tsx",["180"],"import { useField } from \"formik\";\nimport React from \"react\";\nimport { Form, Label } from \"semantic-ui-react\";\nimport DatePicker, { ReactDatePickerProps } from \"react-datepicker\";\n\ninterface Props {\n  placeholder: string;\n  name: string;\n  label?: string;\n}\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\n  const [field, meta, helpers] = useField(props.name!);\n  return (\n    <Form.Field error={meta.touched && !!meta.error}>\n      <DatePicker\n        {...field}\n        {...props}\n        selected={(field.value && new Date(field.value)) || null}\n        onChange={(value) => helpers.setValue(value)}\n      />\n      {meta.touched && meta.error ? (\n        <Label basic color=\"red\">\n          {meta.error}\n        </Label>\n      ) : null}\n    </Form.Field>\n  );\n}\n","/home/bleart/projects/lab1/client/src/features/tests/details/TestDetails.tsx",["181"],"import { format } from \"date-fns\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Card, Image } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { useStore } from \"../../../app/stores/store\";\n\nexport default function TestDetails() {\n  const { testStore } = useStore();\n  const { selectedTest: test, openForm, cancelSelectedTest } = testStore;\n\n  if (!test) return <LoadingComponent />;\n\n  return (\n    <Card fluid>\n      <Image src={`/assets/categoryImages/${test.variation}.jpg`} />\n      <Card.Content>\n        <Card.Header>{test.description}</Card.Header>\n        <Card.Meta>\n          <span>{format (test.date!, 'dd.MM.yyyy, (h:mm aa)')}</span>\n        </Card.Meta>\n        <Card.Description>{test.description}</Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <Button.Group widths=\"2\">\n          <Button \n            onClick={() => openForm(test.id)}\n            basic\n            color=\"blue\"\n            content=\"Edit\"\n          />\n          <Button \n            onClick={cancelSelectedTest}\n            basic\n            color=\"grey\"\n            content=\"Cancel\"\n          />\n        </Button.Group>\n      </Card.Content>\n    </Card>\n  );\n}\n","/home/bleart/projects/lab1/client/src/features/patients/details/PatientDetails.tsx",["182","183"],"import { observer } from \"mobx-react-lite\";\nimport React, { useEffect } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { Button, Card, Image } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { format } from \"date-fns\";\n\nexport default observer(function PatientDetails() {\n  const { patientStore } = useStore();\n  const {\n    selectedPatient: patient,\n    loadPatient,\n    loadingInitial,\n    openForm,\n    cancelSelectedPatient\n  } = patientStore;\n  const { id } = useParams<{ id: string }>();\n\n  useEffect(() => {\n    if (id) loadPatient(id);\n  }, [id, loadPatient]);\n\n  if (loadingInitial || !patient) return <LoadingComponent />;\n  return (\n    <Card fluid>\n     {/* <Image src={`/assets/categoryImages/${patient.phone_Number}.jpg`} /> */}\n      <Card.Content>\n        <Card.Header>{patient.full_Name}</Card.Header>\n        <Card.Meta>\n          <span>{format (patient.birthday!, 'dd.MM.yyyy, (h:mm aa)')}</span>\n        </Card.Meta>\n        <Card.Description>{patient.gender}</Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n      <Button.Group widths=\"2\">\n          <Button \n            onClick={() => openForm(patient.id)}\n            basic\n            color=\"blue\"\n            content=\"Edit\"\n          />\n          <Button \n            onClick={cancelSelectedPatient}\n            basic\n            color=\"grey\"\n            content=\"Cancel\"\n          />\n        </Button.Group>\n      </Card.Content>\n    </Card>\n  );\n});\n","/home/bleart/projects/lab1/client/src/features/tests/form/TestForm.tsx",["184","185"],"import { Formik, Form, ErrorMessage, validateYupSchema } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useState } from \"react\";\nimport { Button, Segment } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport * as Yup from \"yup\";\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\nimport { variationOptions } from \"../../../app/common/options/variationOptions\";\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\nimport { Test } from \"../../../app/models/test\";\n\nexport default observer(function TestForm() {\n  const { testStore } = useStore();\n  const { selectedTest, closeForm, createTest, updateTest, loading } =\n    testStore;\n\n  const initialState = selectedTest ?? {\n    id: \"\",\n    patientId: 0,\n    date: null,\n    description: \"\",\n    hospitalId: 0,\n    vaccineId: 0,\n    variation: \"\",\n  };\n\n  const validationSchema = Yup.object({\n    patientId: Yup.number().required(),\n    date: Yup.string().required(\"Ju lutem vendosni nje date\").nullable(),\n    description: Yup.string().required(),\n    hospitalId: Yup.number().required(),\n    vaccineId: Yup.number().required(),\n    variation: Yup.string().required(),\n  });\n  const [test] = useState(initialState);\n\n  function handleFormSubmit(test: Test) {\n    test.id ? updateTest(test) : createTest(test);\n  }\n\n  return (\n    <Segment clearing>\n      <Formik\n        validationSchema={validationSchema}\n        enableReinitialize\n        initialValues={test}\n        onSubmit={(values) => handleFormSubmit(values)}\n      >\n        {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n          <Form className=\"ui form\" onSubmit={handleSubmit}>\n            <MyTextInput name=\"patientId\" placeholder=\"ID e Pacientit\" />\n            <MyDateInput\n              placeholderText=\"Data\"\n              name=\"date\"\n              showTimeSelect\n              timeCaption=\"time\"\n              dateFormat=\"dd.MM.yyyy, (h:mm aa)\"\n            />\n\n            <MyTextArea rows={3} placeholder=\"Pershkrimi\" name=\"description\" />\n\n            <MyTextInput placeholder=\"ID e Spitalit\" name=\"hospitalId\" />\n            <MyTextInput placeholder=\"ID e Vaksines\" name=\"vaccineId\" />\n            <MySelectInput\n              options={variationOptions}\n              placeholder=\"Varianti\"\n              name=\"variation\"\n              \n            />\n            <Button\n              disabled={isSubmitting || !dirty || !isValid}\n              loading={loading}\n              floated=\"right\"\n              positive\n              type=\"submit\"\n              content=\"Ruaj\"\n            />\n            <Button\n              onClick={closeForm}\n              floated=\"right\"\n              type=\"button\"\n              content=\"Anulo\"\n            />\n          </Form>\n        )}\n      </Formik>\n    </Segment>\n  );\n});\n","/home/bleart/projects/lab1/client/src/features/covcomponents/CountryList.tsx",[],"/home/bleart/projects/lab1/client/src/features/covcomponents/GlobalInfo.tsx",[],"/home/bleart/projects/lab1/client/src/app/common/options/variationOptions.ts",[],"/home/bleart/projects/lab1/client/src/app/common/form/MyTextArea.tsx",[],{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","severity":1,"message":"191","line":4,"column":35,"nodeType":"192","messageId":"193","endLine":4,"endColumn":40},{"ruleId":"190","severity":1,"message":"194","line":7,"column":8,"nodeType":"192","messageId":"193","endLine":7,"endColumn":18},{"ruleId":"190","severity":1,"message":"195","line":9,"column":24,"nodeType":"192","messageId":"193","endLine":9,"endColumn":36},{"ruleId":"190","severity":1,"message":"196","line":4,"column":26,"nodeType":"192","messageId":"193","endLine":4,"endColumn":31},{"ruleId":"197","severity":1,"message":"198","line":13,"column":42,"nodeType":"199","messageId":"200","endLine":13,"endColumn":44},{"ruleId":"190","severity":1,"message":"201","line":8,"column":10,"nodeType":"192","messageId":"193","endLine":8,"endColumn":17},{"ruleId":"190","severity":1,"message":"202","line":6,"column":11,"nodeType":"192","messageId":"193","endLine":6,"endColumn":16},{"ruleId":"190","severity":1,"message":"203","line":3,"column":10,"nodeType":"192","messageId":"193","endLine":3,"endColumn":14},{"ruleId":"190","severity":1,"message":"203","line":3,"column":10,"nodeType":"192","messageId":"193","endLine":3,"endColumn":14},{"ruleId":"190","severity":1,"message":"191","line":4,"column":24,"nodeType":"192","messageId":"193","endLine":4,"endColumn":29},{"ruleId":"190","severity":1,"message":"195","line":1,"column":24,"nodeType":"192","messageId":"193","endLine":1,"endColumn":36},{"ruleId":"190","severity":1,"message":"204","line":1,"column":38,"nodeType":"192","messageId":"193","endLine":1,"endColumn":55},"no-native-reassign",["205"],"no-negated-in-lhs",["206"],"@typescript-eslint/no-unused-vars","'Image' is defined but never used.","Identifier","unusedVar","'modalStore' is defined but never used.","'ErrorMessage' is defined but never used.","'Label' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'loading' is assigned a value but never used.","'Props' is defined but never used.","'Link' is defined but never used.","'validateYupSchema' is defined but never used.","no-global-assign","no-unsafe-negation"]