[{"C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\index.tsx":"1","C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\app\\stores\\store.ts":"3","C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\app\\layout\\App.tsx":"4","C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\app\\stores\\patientStore.ts":"5","C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\app\\stores\\testStore.ts":"6","C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\app\\layout\\NavBar.tsx":"7","C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\features\\patients\\dashboard\\PatientDashboard.tsx":"8","C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\features\\home\\HomePage.tsx":"9","C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\features\\tests\\dashboard\\TestDashboard.tsx":"10","C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\features\\stats\\CountryDashboard.tsx":"11","C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\app\\api\\agent.ts":"12","C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\app\\layout\\LoadingComponent.tsx":"13","C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\features\\patients\\dashboard\\PatientList.tsx":"14","C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\features\\tests\\dashboard\\TestList.tsx":"15","C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\features\\stats\\CountryList.tsx":"16","C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\features\\tests\\details\\TestDetails.tsx":"17","C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\features\\tests\\form\\TestForm.tsx":"18"},{"size":763,"mtime":1621495212408,"results":"19","hashOfConfig":"20"},{"size":440,"mtime":1621495212408,"results":"21","hashOfConfig":"20"},{"size":443,"mtime":1621495212399,"results":"22","hashOfConfig":"20"},{"size":902,"mtime":1621495212395,"results":"23","hashOfConfig":"20"},{"size":3501,"mtime":1621495212399,"results":"24","hashOfConfig":"20"},{"size":2796,"mtime":1621495212400,"results":"25","hashOfConfig":"20"},{"size":997,"mtime":1621501795506,"results":"26","hashOfConfig":"20"},{"size":838,"mtime":1621499800257,"results":"27","hashOfConfig":"20"},{"size":1690,"mtime":1621501224559,"results":"28","hashOfConfig":"20"},{"size":1326,"mtime":1621495212405,"results":"29","hashOfConfig":"20"},{"size":214,"mtime":1621500334112,"results":"30","hashOfConfig":"20"},{"size":2181,"mtime":1621495212395,"results":"31","hashOfConfig":"20"},{"size":375,"mtime":1621499685234,"results":"32","hashOfConfig":"20"},{"size":2072,"mtime":1621495212402,"results":"33","hashOfConfig":"20"},{"size":1793,"mtime":1621495212405,"results":"34","hashOfConfig":"20"},{"size":2412,"mtime":1621501699459,"results":"35","hashOfConfig":"20"},{"size":1193,"mtime":1621495212407,"results":"36","hashOfConfig":"20"},{"size":2442,"mtime":1621502035276,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"188hxxt",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\index.tsx",[],["78","79"],"C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\reportWebVitals.ts",[],"C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\app\\stores\\store.ts",[],"C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\app\\layout\\App.tsx",[],"C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\app\\stores\\patientStore.ts",["80"],"import {makeAutoObservable, runInAction} from \"mobx\";\r\nimport { Patient } from \"../models/patient\";\r\nimport agent from \"../api/agent\";\r\n\r\nexport default class PatientStore{\r\npatientRegistry=new Map<string, Patient>();\r\nselectedPatient: Patient | undefined=undefined;\r\neditMode=false;\r\nloading=false;\r\nloadingInitial=true;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get patientsByDate(){\r\n        return Array.from(this.patientRegistry.values()).sort((a,b)=> \r\n        Date.parse(a.birthday)- Date.parse(b.birthday));\r\n    }\r\n\r\n    loadPatients= async() => {\r\n        this.loadingInitial=true;\r\n        try{\r\n            const patients =await agent.Patients.list();\r\n                    patients.forEach(patient=> {\r\n                    this.setPatient(patient);\r\n\r\n                })            \r\n            this.setLoadingInitial(false);            \r\n        }catch (error){\r\n            console.log(error);\r\n          \r\n                this.setLoadingInitial(false);\r\n           \r\n            \r\n        }\r\n    }\r\n\r\n    loadPatient=async(id:string)=>{\r\n        let patient= this.getPatient(id);\r\n\r\n        if(patient){\r\n            this.selectedPatient=patient;\r\n            return patient;\r\n        }else{\r\n            this.loadingInitial=true;\r\n            try{\r\n                patient=await agent.Patients.details(id);\r\n                this.setPatient(patient);\r\n                runInAction(() => {\r\n                    this.selectedPatient=(patient);\r\n\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return patient;\r\n\r\n\r\n            }catch(error){\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private setPatient=(patient: Patient)=>{\r\n        patient.birthday=patient.birthday;\r\n                    this.patientRegistry.set(patient.id, patient);\r\n    }\r\n\r\n    private getPatient=(id:string)=>{\r\n        return this.patientRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createPatient=async (patient: Patient) => {\r\n        this.loading =true;\r\n        try{\r\n\r\n            await agent.Patients.create(patient);\r\n            runInAction(() => {\r\n                this.patientRegistry.set(patient.id, patient);\r\n                this.selectedPatient=patient;\r\n                this.editMode=false;\r\n                this.loading=false;\r\n            })\r\n\r\n        }catch(error){\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading=false;\r\n\r\n        })\r\n    }\r\n  }\r\n  updatePatient=async (patient: Patient) => {\r\n    this.loading =true;\r\n    try{\r\n\r\n        await agent.Patients.update(patient);\r\n        runInAction(() => {\r\n            this.patientRegistry.set(patient.id, patient);\r\n            this.selectedPatient=patient;\r\n            this.editMode=false;\r\n            this.loading=false;\r\n        })\r\n\r\n    }catch(error){\r\n        console.log(error);\r\n        runInAction(() => {\r\n            this.loading=false;\r\n\r\n         })\r\n      } \r\n   }\r\n\r\n   deletePatient= async (id: string) => {\r\n    this.loading =true;\r\n    try{\r\n\r\n        await agent.Patients.delete(id);\r\n        runInAction(() => {\r\n          this.patientRegistry.delete(id);  \r\n            this.loading=false;\r\n        })\r\n\r\n    }catch(error){\r\n        console.log(error);\r\n        runInAction(() => {\r\n            this.loading=false;\r\n\r\n         })\r\n   }\r\n}\r\n}","C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\app\\stores\\testStore.ts",[],"C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\app\\layout\\NavBar.tsx",["81"],"C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\features\\patients\\dashboard\\PatientDashboard.tsx",[],"C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\features\\home\\HomePage.tsx",[],"C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\features\\tests\\dashboard\\TestDashboard.tsx",["82"],"import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Button, Grid, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport TestDetails from \"../details/TestDetails\";\r\nimport TestForm from \"../form/TestForm\";\r\nimport TestList from \"./TestList\";\r\n\r\nexport default observer(function TestDashboard() {\r\n  const { testStore } = useStore();\r\n  const { selectedTest, editMode } = testStore;\r\n\r\n  useEffect(() => {\r\n    testStore.loadTests();\r\n  }, [testStore]); // side-effect runs when any dependecy values changes\r\n\r\n  if (testStore.loadingIntial)\r\n    return <LoadingComponent content=\"Loading app\" />;\r\n\r\n  // set the app's title\r\n  // TODO: find a better way to do this\r\n  document.title = \"lab1\";\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={() => testStore.openForm()}\r\n        primary\r\n        content=\"Create a Test\"\r\n        style={{ marginBottom: \"1.4rem\" }}\r\n      />\r\n      <Grid>\r\n        <Grid.Column width=\"12\">\r\n          {selectedTest && !editMode && <TestDetails />}\r\n          {editMode && <TestForm />}\r\n        </Grid.Column>\r\n        <Grid.Column width=\"12\">\r\n          <TestList />\r\n        </Grid.Column>\r\n      </Grid>\r\n    </>\r\n  );\r\n});\r\n","C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\features\\stats\\CountryDashboard.tsx",["83"],"C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\app\\api\\agent.ts",["84"],"import axios, { AxiosResponse } from \"axios\";\r\nimport { count } from \"console\";\r\nimport { Country } from \"../models/country\";\r\nimport { Patient } from \"../models/patient\";\r\nimport { Test } from \"../models/test\";\r\n\r\nconst sleep = (delay: number) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, delay);\r\n  });\r\n};\r\n\r\naxios.defaults.baseURL = \"http://localhost:5000/api\";\r\n\r\naxios.interceptors.response.use(async (response) => {\r\n  try {\r\n    await sleep(700);\r\n    return response;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return await Promise.reject(error);\r\n  }\r\n});\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n  get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n  post: <T>(url: string, body: {}) =>\r\n    axios.post<T>(url, body).then(responseBody),\r\n  put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n  del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n};\r\n\r\nconst Tests = {\r\n  list: () => requests.get<Test[]>(\"/tests\"),\r\n  details: (id: string) => requests.get<Test>(`/tests/${id}`),\r\n  create: (test: Test) => axios.post<void>(\"/tests\", test),\r\n  update: (test: Test) => axios.put<void>(`/tests/${test.id}`, test),\r\n  delete: (id: string) => axios.delete<void>(`/tests/${id}`),\r\n};\r\n\r\nconst Countries = {\r\n  list: () => requests.get<Country[]>(\"/countries\"),\r\n  details: (id: string) => requests.get<Country>(`/countries/${id}`),\r\n  create: (country: Country) => axios.post<void>(\"/countries\", country),\r\n  update: (country: Country) =>\r\n    axios.put<void>(`/countries/${country.id}`, test),\r\n  delete: (id: string) => axios.delete<void>(`/countries/${id}`),\r\n};\r\n\r\nconst Patients = {\r\n  list: () => requests.get<Patient[]>(\"/patients\"),\r\n  details: (id: string) => requests.get<Patient>(`/patients/${id}`),\r\n  create: (patient: Patient) => requests.post<void>(\"/patients\", patient),\r\n  update: (patient: Patient) =>\r\n    axios.put<void>(`/patients/${patient.id}`, patient),\r\n  delete: (id: string) => axios.delete<void>(`/patients/${id}`),\r\n};\r\n\r\nconst agent = {\r\n  Tests,\r\n  Countries,\r\n  Patients,\r\n};\r\n\r\nexport default agent;\r\n","C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\app\\layout\\LoadingComponent.tsx",[],"C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\features\\patients\\dashboard\\PatientList.tsx",[],"C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\features\\tests\\dashboard\\TestList.tsx",[],"C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\features\\stats\\CountryList.tsx",["85","86","87","88","89","90"],"C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\features\\tests\\details\\TestDetails.tsx",[],"C:\\Users\\StarTech Ferizaj\\Desktop\\lab1\\client\\src\\features\\tests\\form\\TestForm.tsx",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":67,"column":26,"nodeType":"97","messageId":"98","endLine":67,"endColumn":42},{"ruleId":"99","severity":1,"message":"100","line":7,"column":11,"nodeType":"101","messageId":"102","endLine":7,"endColumn":20},{"ruleId":"99","severity":1,"message":"103","line":3,"column":24,"nodeType":"101","messageId":"102","endLine":3,"endColumn":31},{"ruleId":"99","severity":1,"message":"104","line":2,"column":8,"nodeType":"101","messageId":"102","endLine":2,"endColumn":24},{"ruleId":"99","severity":1,"message":"105","line":2,"column":10,"nodeType":"101","messageId":"102","endLine":2,"endColumn":15},{"ruleId":"99","severity":1,"message":"106","line":3,"column":3,"nodeType":"101","messageId":"102","endLine":3,"endColumn":9},{"ruleId":"99","severity":1,"message":"107","line":5,"column":3,"nodeType":"101","messageId":"102","endLine":5,"endColumn":11},{"ruleId":"99","severity":1,"message":"108","line":6,"column":3,"nodeType":"101","messageId":"102","endLine":6,"endColumn":8},{"ruleId":"99","severity":1,"message":"103","line":7,"column":3,"nodeType":"101","messageId":"102","endLine":7,"endColumn":10},{"ruleId":"99","severity":1,"message":"104","line":12,"column":8,"nodeType":"101","messageId":"102","endLine":12,"endColumn":24},{"ruleId":"99","severity":1,"message":"109","line":16,"column":10,"nodeType":"101","messageId":"102","endLine":16,"endColumn":17},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-self-assign","'patient.birthday' is assigned to itself.","MemberExpression","selfAssignment","@typescript-eslint/no-unused-vars","'testStore' is assigned a value but never used.","Identifier","unusedVar","'Segment' is defined but never used.","'LoadingComponent' is defined but never used.","'count' is defined but never used.","'Button' is defined but never used.","'ItemMeta' is defined but never used.","'Label' is defined but never used.","'loading' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]