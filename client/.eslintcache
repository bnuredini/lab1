[{"/home/bleart/projects/lab1/client/src/index.tsx":"1","/home/bleart/projects/lab1/client/src/reportWebVitals.ts":"2","/home/bleart/projects/lab1/client/src/app/stores/store.ts":"3","/home/bleart/projects/lab1/client/src/app/layout/App.tsx":"4","/home/bleart/projects/lab1/client/src/app/stores/patientStore.ts":"5","/home/bleart/projects/lab1/client/src/app/stores/testStore.ts":"6","/home/bleart/projects/lab1/client/src/app/stores/commonStore.ts":"7","/home/bleart/projects/lab1/client/src/app/stores/modalStore.ts":"8","/home/bleart/projects/lab1/client/src/app/stores/userStore.ts":"9","/home/bleart/projects/lab1/client/src/app/layout/LoadingComponent.tsx":"10","/home/bleart/projects/lab1/client/src/app/layout/NavBar.tsx":"11","/home/bleart/projects/lab1/client/src/errors/TestError.tsx":"12","/home/bleart/projects/lab1/client/src/errors/NotFound.tsx":"13","/home/bleart/projects/lab1/client/src/errors/ServerError.tsx":"14","/home/bleart/projects/lab1/client/src/features/home/HomePage.tsx":"15","/home/bleart/projects/lab1/client/src/features/stats/CountryDashboard.tsx":"16","/home/bleart/projects/lab1/client/src/features/tests/dashboard/TestDashboard.tsx":"17","/home/bleart/projects/lab1/client/src/features/patients/form/PatientForm.tsx":"18","/home/bleart/projects/lab1/client/src/features/patients/dashboard/PatientDashboard.tsx":"19","/home/bleart/projects/lab1/client/src/features/users/LoginForm.tsx":"20","/home/bleart/projects/lab1/client/src/features/users/LoginPage.tsx":"21","/home/bleart/projects/lab1/client/src/app/common/modals/ModalContainer.tsx":"22","/home/bleart/projects/lab1/client/src/app/api/agent.ts":"23","/home/bleart/projects/lab1/client/src/app/common/options/genderOptions.ts":"24","/home/bleart/projects/lab1/client/src/features/stats/CountryList.tsx":"25","/home/bleart/projects/lab1/client/src/features/tests/dashboard/TestList.tsx":"26","/home/bleart/projects/lab1/client/src/features/patients/dashboard/PatientList.tsx":"27","/home/bleart/projects/lab1/client/src/errors/ValidationErrors.tsx":"28","/home/bleart/projects/lab1/client/src/features/tests/details/TestDetails.tsx":"29","/home/bleart/projects/lab1/client/src/features/tests/form/TestForm.tsx":"30","/home/bleart/projects/lab1/client/src/app/common/form/MySelectInput.tsx":"31","/home/bleart/projects/lab1/client/src/app/common/form/MyDateInput.tsx":"32","/home/bleart/projects/lab1/client/src/features/patients/details/PatientDetails.tsx":"33","/home/bleart/projects/lab1/client/src/features/users/RegisterForm.tsx":"34","/home/bleart/projects/lab1/client/src/app/common/form/MyTextInput.tsx":"35","/home/bleart/projects/lab1/client/src/app/common/options/variationOptions.ts":"36","/home/bleart/projects/lab1/client/src/app/common/form/MyTextArea.tsx":"37"},{"size":939,"mtime":1622049832357,"results":"38","hashOfConfig":"39"},{"size":425,"mtime":1607152858000,"results":"40","hashOfConfig":"39"},{"size":714,"mtime":1622049837254,"results":"41","hashOfConfig":"39"},{"size":2373,"mtime":1622052149713,"results":"42","hashOfConfig":"39"},{"size":3472,"mtime":1622049832353,"results":"43","hashOfConfig":"39"},{"size":2669,"mtime":1622049832353,"results":"44","hashOfConfig":"39"},{"size":725,"mtime":1622049837254,"results":"45","hashOfConfig":"39"},{"size":486,"mtime":1622049837254,"results":"46","hashOfConfig":"39"},{"size":1530,"mtime":1622049837254,"results":"47","hashOfConfig":"39"},{"size":357,"mtime":1621675393593,"results":"48","hashOfConfig":"39"},{"size":2518,"mtime":1622052579557,"results":"49","hashOfConfig":"39"},{"size":2091,"mtime":1621953958644,"results":"50","hashOfConfig":"39"},{"size":428,"mtime":1621953958644,"results":"51","hashOfConfig":"39"},{"size":626,"mtime":1621953958644,"results":"52","hashOfConfig":"39"},{"size":3492,"mtime":1621953958644,"results":"53","hashOfConfig":"39"},{"size":141,"mtime":1621953958648,"results":"54","hashOfConfig":"39"},{"size":1270,"mtime":1621953958648,"results":"55","hashOfConfig":"39"},{"size":2589,"mtime":1622049832353,"results":"56","hashOfConfig":"39"},{"size":1442,"mtime":1622049832353,"results":"57","hashOfConfig":"39"},{"size":1478,"mtime":1622049837258,"results":"58","hashOfConfig":"39"},{"size":1644,"mtime":1622051730114,"results":"59","hashOfConfig":"39"},{"size":446,"mtime":1622049837254,"results":"60","hashOfConfig":"39"},{"size":3559,"mtime":1622049837254,"results":"61","hashOfConfig":"39"},{"size":108,"mtime":1622049832349,"results":"62","hashOfConfig":"39"},{"size":2229,"mtime":1621953958648,"results":"63","hashOfConfig":"39"},{"size":1810,"mtime":1622049832357,"results":"64","hashOfConfig":"39"},{"size":1875,"mtime":1622049832353,"results":"65","hashOfConfig":"39"},{"size":414,"mtime":1622049837258,"results":"66","hashOfConfig":"39"},{"size":1266,"mtime":1622049832357,"results":"67","hashOfConfig":"39"},{"size":2917,"mtime":1622049832357,"results":"68","hashOfConfig":"39"},{"size":895,"mtime":1622049832349,"results":"69","hashOfConfig":"39"},{"size":843,"mtime":1622049832349,"results":"70","hashOfConfig":"39"},{"size":1580,"mtime":1622049832353,"results":"71","hashOfConfig":"39"},{"size":2050,"mtime":1622049837258,"results":"72","hashOfConfig":"39"},{"size":632,"mtime":1622049837254,"results":"73","hashOfConfig":"39"},{"size":294,"mtime":1622049832349,"results":"74","hashOfConfig":"39"},{"size":633,"mtime":1622049832349,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"11f68r5",{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"100"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"100"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"100"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"100"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"100"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"100"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"100"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"100"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"/home/bleart/projects/lab1/client/src/index.tsx",[],"/home/bleart/projects/lab1/client/src/reportWebVitals.ts",[],"/home/bleart/projects/lab1/client/src/app/stores/store.ts",[],"/home/bleart/projects/lab1/client/src/app/layout/App.tsx",[],"/home/bleart/projects/lab1/client/src/app/stores/patientStore.ts",[],"/home/bleart/projects/lab1/client/src/app/stores/testStore.ts",[],"/home/bleart/projects/lab1/client/src/app/stores/commonStore.ts",[],"/home/bleart/projects/lab1/client/src/app/stores/modalStore.ts",[],"/home/bleart/projects/lab1/client/src/app/stores/userStore.ts",[],"/home/bleart/projects/lab1/client/src/app/layout/LoadingComponent.tsx",[],"/home/bleart/projects/lab1/client/src/app/layout/NavBar.tsx",["159"],"/home/bleart/projects/lab1/client/src/errors/TestError.tsx",[],["160","161"],"/home/bleart/projects/lab1/client/src/errors/NotFound.tsx",[],"/home/bleart/projects/lab1/client/src/errors/ServerError.tsx",[],"/home/bleart/projects/lab1/client/src/features/home/HomePage.tsx",[],"/home/bleart/projects/lab1/client/src/features/stats/CountryDashboard.tsx",[],"/home/bleart/projects/lab1/client/src/features/tests/dashboard/TestDashboard.tsx",[],"/home/bleart/projects/lab1/client/src/features/patients/form/PatientForm.tsx",["162","163"],"import { observer } from \"mobx-react-lite\";\nimport React, {useState } from \"react\";\nimport { Button,Segment } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport * as Yup from  'yup';\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\nimport { Formik, Form, ErrorMessage, validateYupSchema} from \"formik\";\nimport { genderOptions } from \"../../../app/common/options/genderOptions\";\nimport { Patient } from \"../../../app/models/patient\";\n\nexport default observer(function PatientForm() {\n  const { patientStore } = useStore();\n  const { createPatient, selectedPatient, closeForm, updatePatient, loading} = patientStore;\n   \n  \n  const initialState = selectedPatient ?? {\n    id: \"\",\n    full_Name: \"\",\n    birthday: null,\n    gender: \"\",\n    phone_Number:0,\n    email: \"\",\n    address:\"\",\n    \n  };\n\n  const validationSchema=Yup.object({\n  \n    full_Name: Yup.string().required(),\n    birthday: Yup.string().required('Ju lutem vendosni ditelindjen').nullable(),\n    gender: Yup.string().required(),\n    phone_Number: Yup.number().required(),\n    email: Yup.string().required(),\n    address: Yup.string().required()\n    \n  })\n  const [patient] = useState(initialState);\n\n  function handleFormSubmit(patient: Patient) {\n     patient.id ? updatePatient(patient) : createPatient(patient);\n   }\n\n\n  return (\n    <Segment clearing>\n      <Formik \n      validationSchema={validationSchema}\n      enableReinitialize\n      initialValues={patient}\n      onSubmit={values => handleFormSubmit(values)}>\n        {({handleSubmit, isValid, isSubmitting, dirty}) =>(\n    <Form  className='ui form' onSubmit={handleSubmit} >\n<MyTextInput  name=\"Emri dhe Mbiemri\" placeholder=\"Full_Name\"/>\n<MyDateInput\n          placeholderText=\"Ditelindja\"\n          name=\"date\"\n          showTimeSelect\n          timeCaption='time'\n          dateFormat='dd.MM.yyyy, (h:mm aa)'\n        />\n<MySelectInput options={genderOptions} placeholder=\"Gjinia\" name=\"gender\"/>\n<MyTextInput placeholder=\"Numri i telefonit\" name=\"phone_Number\"/>\n<MyTextInput placeholder=\"Email-i\" name=\"email\"/>\n<MyTextInput\n  placeholder=\"Adresa\" name=\"address\"/>\n<Button\ndisabled={isSubmitting || !dirty || !isValid}\n  loading={loading}\n  floated=\"right\"\n  positive\n  type=\"submit\"\n  content=\"Submit\"\n/>\n<Button\n onClick={closeForm}\n  to=\"/patients\"\n  floated=\"right\"\n  type=\"button\"\n  content=\"Cancel\"\n/>\n</Form>\n        )}\n      </Formik>\n      \n    </Segment>\n  );\n});\n","/home/bleart/projects/lab1/client/src/features/patients/dashboard/PatientDashboard.tsx",[],"/home/bleart/projects/lab1/client/src/features/users/LoginForm.tsx",[],"/home/bleart/projects/lab1/client/src/features/users/LoginPage.tsx",[],"/home/bleart/projects/lab1/client/src/app/common/modals/ModalContainer.tsx",[],"/home/bleart/projects/lab1/client/src/app/api/agent.ts",["164"],"/home/bleart/projects/lab1/client/src/app/common/options/genderOptions.ts",[],"/home/bleart/projects/lab1/client/src/features/stats/CountryList.tsx",["165"],"import React, { useEffect, useState } from \"react\";\nimport { Item, Statistic } from \"semantic-ui-react\";\nimport agent from \"../../app/api/agent\";\nimport { Country } from \"../../app/models/country\";\n\nexport default function CountryList() {\n  const [countries, setCountries] = useState<Country[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  // if (loading) return <LoadingComponent content=\"Loading app\" />;\n\n  useEffect(() => {\n    agent.Countries.list().then((response) => {\n      let countries: Country[] = [];\n      response.forEach((country) => {\n        // test.date = test.date.split(\"T\")[0];\n        countries.push(country);\n      });\n      setCountries(countries);\n      setLoading(false);\n    });\n  }, []);\n\n  return (\n    <Item.Group divided>\n      {countries.map((country) => (\n        <Item key={country.id}>\n          <Item.Content>\n            <Item.Header as=\"a\">{country.name}</Item.Header>\n            <Item.Description>\n              <Statistic>\n                <Statistic.Value>{country.infections}</Statistic.Value>\n                <Statistic.Label>Infektime</Statistic.Label>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>{country.deaths}</Statistic.Value>\n                <Statistic.Label>Vdekje</Statistic.Label>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>{country.recoveries}</Statistic.Value>\n                <Statistic.Label>Rikuperime</Statistic.Label>\n              </Statistic>\n              <Statistic>\n                <Statistic.Value>{country.vaccinated}</Statistic.Value>\n                <Statistic.Label>Vaksinime</Statistic.Label>\n              </Statistic>\n\n              {/* <div>Infections: {country.infections}</div>\n              <div>Deaths: {country.deaths}</div>\n              <div>Recoveries: {country.recoveries}</div>\n              <div>Vaccinated: {country.vaccinated}</div> */}\n            </Item.Description>\n            <Item.Extra>\n              {/* <Button floated=\"right\" content=\"View\" color=\"blue\" />\n                <Button floated=\"right\" content=\"Delete\" color=\"red\" /> */}\n            </Item.Extra>\n          </Item.Content>\n        </Item>\n      ))}\n    </Item.Group>\n  );\n}\n","/home/bleart/projects/lab1/client/src/features/tests/dashboard/TestList.tsx",[],"/home/bleart/projects/lab1/client/src/features/patients/dashboard/PatientList.tsx",[],"/home/bleart/projects/lab1/client/src/errors/ValidationErrors.tsx",["166"],"import React from \"react\";\nimport { Message } from \"semantic-ui-react\";\n\ninterface Props {\n  errors: any;\n}\n\nexport default function ValidationError({ errors }: Props) {\n  return (\n    <Message error>\n      {errors && (\n        <Message.List>\n          {errors.map((err: any, i: any) => {\n            <Message.Item key={i}>{err}</Message.Item>;\n          })}\n        </Message.List>\n      )}\n    </Message>\n  );\n}\n","/home/bleart/projects/lab1/client/src/features/tests/details/TestDetails.tsx",["167"],"import { format } from \"date-fns\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Card, Image } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { useStore } from \"../../../app/stores/store\";\n\nexport default function TestDetails() {\n  const { testStore } = useStore();\n  const { selectedTest: test, openForm, cancelSelectedTest } = testStore;\n\n  if (!test) return <LoadingComponent />;\n\n  return (\n    <Card fluid>\n      <Image src={`/assets/categoryImages/${test.variation}.jpg`} />\n      <Card.Content>\n        <Card.Header>{test.description}</Card.Header>\n        <Card.Meta>\n          <span>{format (test.date!, 'dd.MM.yyyy, (h:mm aa)')}</span>\n        </Card.Meta>\n        <Card.Description>{test.description}</Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <Button.Group widths=\"2\">\n          <Button \n            onClick={() => openForm(test.id)}\n            basic\n            color=\"blue\"\n            content=\"Edit\"\n          />\n          <Button \n            onClick={cancelSelectedTest}\n            basic\n            color=\"grey\"\n            content=\"Cancel\"\n          />\n        </Button.Group>\n      </Card.Content>\n    </Card>\n  );\n}\n","/home/bleart/projects/lab1/client/src/features/tests/form/TestForm.tsx",["168","169"],"import { Formik, Form, ErrorMessage, validateYupSchema } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useState } from \"react\";\nimport { Button, Segment } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport * as Yup from  'yup';\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\nimport { variationOptions } from \"../../../app/common/options/variationOptions\";\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\nimport { Test } from \"../../../app/models/test\";\n\nexport default observer(function TestForm() {\n  const { testStore } = useStore();\n  const { selectedTest, closeForm, createTest, updateTest, loading } =\n    testStore;\n\n  const initialState = selectedTest ?? {\n    id: \"\",\n    patientId: 0,\n    date: null,\n    description: \"\",\n    hospitalId: 0,\n    vaccineId: 0,\n    variation: \"\",\n  };\n\n  const validationSchema=Yup.object({\n  \n    patientId: Yup.number().required(),\n    date: Yup.string().required('Ju lutem vendosni nje date').nullable(),\n    description: Yup.string().required(),\n    hospitalId: Yup.number().required(),\n    vaccineId: Yup.number().required(),\n    variation: Yup.string().required()\n  })\n  const [test] = useState(initialState);\n\n  function handleFormSubmit(test: Test) {\n     test.id ? updateTest(test) : createTest(test);\n   }\n\n  \n\n  return (\n    <Segment clearing>\n      <Formik \n      validationSchema={validationSchema}\n      enableReinitialize \n      initialValues={test} \n      onSubmit={values =>  handleFormSubmit(values)}>        \n      {({handleSubmit, isValid, isSubmitting, dirty}) => (\n          <Form className='ui form' onSubmit={handleSubmit}>\n            <MyTextInput name='patientId' placeholder='PatientID'/>\n        <MyDateInput\n          placeholderText=\"Date\"\n          name=\"date\"\n          showTimeSelect\n          timeCaption='time'\n          dateFormat='dd.MM.yyyy, (h:mm aa)'\n        />\n       \n        <MyTextArea rows={3}\n          placeholder=\"Description\"\n          name=\"description\"\n        />\n     \n          <MyTextInput\n            placeholder=\"Hospital ID\"\n            name=\"hospitalId\"\n          />\n          <MyTextInput\n            placeholder=\"Vaccine ID\"\n            name=\"vaccineId\"\n          />\n        <MySelectInput options={variationOptions}\n          placeholder=\"Variation\"\n          name=\"variation\"\n        />\n        <Button\n        disabled={isSubmitting || !dirty || !isValid}\n          loading={loading}\n          floated=\"right\"\n          positive\n          type=\"submit\"\n          content=\"Submit\"\n        />\n        <Button\n          onClick={closeForm}\n          floated=\"right\"\n          type=\"button\"\n          content=\"Cancel\"\n        />\n</Form>\n        )}\n        </Formik>\n    </Segment>\n  );\n});\n","/home/bleart/projects/lab1/client/src/app/common/form/MySelectInput.tsx",[],"/home/bleart/projects/lab1/client/src/app/common/form/MyDateInput.tsx",["170"],"import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\n\ninterface Props{\n    placeholder: string;\n    name:string;\n    label?: string;\n    \n}\n\n\n\nexport default function MyDateInput(props: Partial <ReactDatePickerProps>){\n    const [field, meta, helpers]=useField(props.name!);\n    return(\n\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker\n            {...field}\n            {...props}\n            selected={(field.value && new Date(field.value)) || null}\n            onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ): null}\n        </Form.Field>\n    )\n\n   \n}","/home/bleart/projects/lab1/client/src/features/patients/details/PatientDetails.tsx",["171","172"],"import { observer } from \"mobx-react-lite\";\nimport React, { useEffect } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { Button, Card, Image } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { format } from \"date-fns\";\n\nexport default observer(function PatientDetails() {\n  const { patientStore } = useStore();\n  const {\n    selectedPatient: patient,\n    loadPatient,\n    loadingInitial,\n    openForm,\n    cancelSelectedPatient\n  } = patientStore;\n  const { id } = useParams<{ id: string }>();\n\n  useEffect(() => {\n    if (id) loadPatient(id);\n  }, [id, loadPatient]);\n\n  if (loadingInitial || !patient) return <LoadingComponent />;\n  return (\n    <Card fluid>\n     {/* <Image src={`/assets/categoryImages/${patient.phone_Number}.jpg`} /> */}\n      <Card.Content>\n        <Card.Header>{patient.full_Name}</Card.Header>\n        <Card.Meta>\n          <span>{format (patient.birthday!, 'dd.MM.yyyy, (h:mm aa)')}</span>\n        </Card.Meta>\n        <Card.Description>{patient.gender}</Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n      <Button.Group widths=\"2\">\n          <Button \n            onClick={() => openForm(patient.id)}\n            basic\n            color=\"blue\"\n            content=\"Edit\"\n          />\n          <Button \n            onClick={cancelSelectedPatient}\n            basic\n            color=\"grey\"\n            content=\"Cancel\"\n          />\n        </Button.Group>\n      </Card.Content>\n    </Card>\n  );\n});\n","/home/bleart/projects/lab1/client/src/features/users/RegisterForm.tsx",["173"],"import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Header, Label } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\n// import ValidationErrors from '../../errors/ValidationErrors';\nimport ValidationError from '../../errors/ValidationErrors';\n\n\n\nexport default observer (function RegisterForm() {\n    const {userStore} =useStore();\n    return (\n        <Formik\n         \n    initialValues={{ displayName: '', username: '' , email: '', password: '', error: null}}\n    onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \n        setErrors({error}))}  \n         validationSchema={Yup.object({\n             displayName: Yup.string().required(),\n             username: Yup.string().required(),\n             email: Yup.string().required().email(),\n             password: Yup.string().required(),\n         })}\n        >\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) =>(\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete= 'off'>\n                    <Header as='h2' content ='Sign up ne Shneta' color='teal' textAlign='center' />\n                    <MyTextInput name='displayName' placeholder='Display Name'/>\n                    <MyTextInput name='username' placeholder='Username'/>\n                    <MyTextInput name='email' placeholder='Email'/>\n                    <MyTextInput name='password' placeholder='Password' type='password'/>\n                    <ErrorMessage \n                        name='error' render={() => \n                        <ValidationError errors={errors.error}/>}\n                    />\n                    <Button disabled={!isValid || !dirty || isSubmitting} \n                     loading={isSubmitting} positive content ='Regjistrohu' type ='submit' fluid/>\n                </Form>\n            )}      \n        </Formik>\n    )\n    \n})\n","/home/bleart/projects/lab1/client/src/app/common/form/MyTextInput.tsx",[],"/home/bleart/projects/lab1/client/src/app/common/options/variationOptions.ts",[],"/home/bleart/projects/lab1/client/src/app/common/form/MyTextArea.tsx",[],{"ruleId":"174","severity":1,"message":"175","line":7,"column":8,"nodeType":"176","messageId":"177","endLine":7,"endColumn":18},{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"174","severity":1,"message":"182","line":9,"column":24,"nodeType":"176","messageId":"177","endLine":9,"endColumn":36},{"ruleId":"174","severity":1,"message":"183","line":9,"column":38,"nodeType":"176","messageId":"177","endLine":9,"endColumn":55},{"ruleId":"174","severity":1,"message":"184","line":7,"column":10,"nodeType":"176","messageId":"177","endLine":7,"endColumn":25},{"ruleId":"174","severity":1,"message":"185","line":8,"column":10,"nodeType":"176","messageId":"177","endLine":8,"endColumn":17},{"ruleId":"186","severity":1,"message":"187","line":13,"column":42,"nodeType":"188","messageId":"189","endLine":13,"endColumn":44},{"ruleId":"174","severity":1,"message":"190","line":3,"column":10,"nodeType":"176","messageId":"177","endLine":3,"endColumn":14},{"ruleId":"174","severity":1,"message":"182","line":1,"column":24,"nodeType":"176","messageId":"177","endLine":1,"endColumn":36},{"ruleId":"174","severity":1,"message":"183","line":1,"column":38,"nodeType":"176","messageId":"177","endLine":1,"endColumn":55},{"ruleId":"174","severity":1,"message":"191","line":6,"column":11,"nodeType":"176","messageId":"177","endLine":6,"endColumn":16},{"ruleId":"174","severity":1,"message":"190","line":3,"column":10,"nodeType":"176","messageId":"177","endLine":3,"endColumn":14},{"ruleId":"174","severity":1,"message":"192","line":4,"column":24,"nodeType":"176","messageId":"177","endLine":4,"endColumn":29},{"ruleId":"174","severity":1,"message":"193","line":4,"column":26,"nodeType":"176","messageId":"177","endLine":4,"endColumn":31},"@typescript-eslint/no-unused-vars","'modalStore' is defined but never used.","Identifier","unusedVar","no-native-reassign",["194"],"no-negated-in-lhs",["195"],"'ErrorMessage' is defined but never used.","'validateYupSchema' is defined but never used.","'storeAnnotation' is defined but never used.","'loading' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Link' is defined but never used.","'Props' is defined but never used.","'Image' is defined but never used.","'Label' is defined but never used.","no-global-assign","no-unsafe-negation"]