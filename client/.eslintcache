[{"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\index.tsx":"1","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\reportWebVitals.ts":"2","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\stores\\store.ts":"3","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\layout\\App.tsx":"4","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\stores\\testStore.ts":"5","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\stores\\commonStore.ts":"6","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\stores\\patientStore.ts":"7","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\layout\\NavBar.tsx":"8","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\errors\\NotFound.tsx":"9","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\errors\\TestError.tsx":"10","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\errors\\ServerError.tsx":"11","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\stats\\CountryDashboard.tsx":"12","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\tests\\dashboard\\TestDashboard.tsx":"13","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\home\\HomePage.tsx":"14","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\patients\\dashboard\\PatientDashboard.tsx":"15","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\patients\\form\\PatientForm.tsx":"16","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\api\\agent.ts":"17","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\errors\\ValidationErrors.tsx":"18","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\stats\\CountryList.tsx":"19","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\layout\\LoadingComponent.tsx":"20","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\tests\\dashboard\\TestList.tsx":"21","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\patients\\dashboard\\PatientList.tsx":"22","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\tests\\details\\TestDetails.tsx":"23","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\tests\\form\\TestForm.tsx":"24","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\form\\MyTextInput.tsx":"25","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\form\\MyTextArea.tsx":"26","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\form\\MySelectInput.tsx":"27","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\options\\variationOptions.ts":"28","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\form\\MyDateInput.tsx":"29","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\models\\test.ts":"30","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\options\\genderOptions.ts":"31","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\patients\\details\\PatientDetails.tsx":"32","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\users\\LoginForm.tsx":"33","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\stores\\userStore.ts":"34","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\users\\LoginPage.tsx":"35","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\stores\\modalStore.ts":"36","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\modals\\ModalContainer.tsx":"37","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\users\\RegisterForm.tsx":"38"},{"size":966,"mtime":1621968873827,"results":"39","hashOfConfig":"40"},{"size":440,"mtime":1620430208848,"results":"41","hashOfConfig":"40"},{"size":742,"mtime":1621996216228,"results":"42","hashOfConfig":"40"},{"size":2305,"mtime":1621996549326,"results":"43","hashOfConfig":"40"},{"size":2791,"mtime":1621968873678,"results":"44","hashOfConfig":"40"},{"size":763,"mtime":1622040643009,"results":"45","hashOfConfig":"40"},{"size":3614,"mtime":1621968873658,"results":"46","hashOfConfig":"40"},{"size":1619,"mtime":1621995551430,"results":"47","hashOfConfig":"40"},{"size":447,"mtime":1621968873699,"results":"48","hashOfConfig":"40"},{"size":2171,"mtime":1621968873733,"results":"49","hashOfConfig":"40"},{"size":646,"mtime":1621968873716,"results":"50","hashOfConfig":"40"},{"size":147,"mtime":1621968873789,"results":"51","hashOfConfig":"40"},{"size":1314,"mtime":1621968873820,"results":"52","hashOfConfig":"40"},{"size":3597,"mtime":1621968873765,"results":"53","hashOfConfig":"40"},{"size":1488,"mtime":1621968873767,"results":"54","hashOfConfig":"40"},{"size":2678,"mtime":1621968873771,"results":"55","hashOfConfig":"40"},{"size":3679,"mtime":1621994153896,"results":"56","hashOfConfig":"40"},{"size":434,"mtime":1622040826207,"results":"57","hashOfConfig":"40"},{"size":2291,"mtime":1621968873807,"results":"58","hashOfConfig":"40"},{"size":375,"mtime":1621518661718,"results":"59","hashOfConfig":"40"},{"size":1864,"mtime":1621968873822,"results":"60","hashOfConfig":"40"},{"size":1931,"mtime":1621968873768,"results":"61","hashOfConfig":"40"},{"size":1308,"mtime":1621968873824,"results":"62","hashOfConfig":"40"},{"size":3017,"mtime":1621968873825,"results":"63","hashOfConfig":"40"},{"size":660,"mtime":1621983317874,"results":"64","hashOfConfig":"40"},{"size":661,"mtime":1621968873594,"results":"65","hashOfConfig":"40"},{"size":930,"mtime":1621968873592,"results":"66","hashOfConfig":"40"},{"size":300,"mtime":1621968873601,"results":"67","hashOfConfig":"40"},{"size":875,"mtime":1621968873591,"results":"68","hashOfConfig":"40"},{"size":178,"mtime":1621898057682,"results":"69","hashOfConfig":"40"},{"size":111,"mtime":1621968873599,"results":"70","hashOfConfig":"40"},{"size":1633,"mtime":1621968873770,"results":"71","hashOfConfig":"40"},{"size":1518,"mtime":1621997031709,"results":"72","hashOfConfig":"40"},{"size":1589,"mtime":1621997212325,"results":"73","hashOfConfig":"40"},{"size":1614,"mtime":1621997897352,"results":"74","hashOfConfig":"40"},{"size":511,"mtime":1621996169639,"results":"75","hashOfConfig":"40"},{"size":464,"mtime":1621996512968,"results":"76","hashOfConfig":"40"},{"size":2096,"mtime":1622041252543,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"17xrftk",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"80"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"80"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"80"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"80"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"80"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"80"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"80"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"80"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\index.tsx",[],["163","164"],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\reportWebVitals.ts",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\stores\\store.ts",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\layout\\App.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\stores\\testStore.ts",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\stores\\commonStore.ts",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\stores\\patientStore.ts",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\layout\\NavBar.tsx",["165"],"import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Button, Container, Menu, Image, Dropdown } from \"semantic-ui-react\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\nexport default observer(function NavBar() {\r\n  const{userStore: {user, logout}}=useStore();\r\n  return (\r\n    <Menu pointing widths={10}>\r\n      <Container>\r\n        <Menu.Item as={NavLink} to=\"/\" exact>\r\n          <img\r\n            src=\"/assets/logo.png\"\r\n            alt=\"logo\"\r\n            style={{ marginRight: \"5px\" }}\r\n          />\r\n        </Menu.Item>\r\n        <Menu.Item as={NavLink} to=\"/tests\" name=\"Testet\" exact />\r\n        <Menu.Item as={NavLink} to=\"/countries\" name=\"Statistikat\" />\r\n        <Menu.Item as={NavLink} to=\"/patients\" name=\"Pacientet\" />\r\n        <Menu.Item as={NavLink} to=\"/errors\" name=\"Errors\" />\r\n        <Menu.Item name=\"Profili\" />\r\n        <Menu.Item position={\"right\"}>\r\n          \r\n</Menu.Item>\r\n<Menu.Item position='right'>\r\n          <Image src={user?.image || '/assets/user.png'}avatar spaced= 'right'/>\r\n          <Dropdown pointing='top left' text={user?.displayName}>\r\n            <Dropdown.Menu>\r\n            <Dropdown.Item as ={Link}to={`/profile/${user?.username}`} text='My Profile' icon='user' />\r\n            <Dropdown.Item onClick={logout} text='Logout' icon='power'/>\r\n            </Dropdown.Menu>  \r\n          </Dropdown>\r\n         \r\n\r\n\r\n          {/* <Menu.Item>\r\n          <Button content=\"Regjistrohu\" />\r\n          </Menu.Item> */}\r\n           \r\n         </Menu.Item>\r\n      </Container>\r\n    </Menu>\r\n  );\r\n})\r\n","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\errors\\NotFound.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\errors\\TestError.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\errors\\ServerError.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\stats\\CountryDashboard.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\tests\\dashboard\\TestDashboard.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\home\\HomePage.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\patients\\dashboard\\PatientDashboard.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\patients\\form\\PatientForm.tsx",["166","167"],"import { observer } from \"mobx-react-lite\";\r\nimport React, {useState } from \"react\";\r\nimport { Button,Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport * as Yup from  'yup';\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { Formik, Form, ErrorMessage, validateYupSchema} from \"formik\";\r\nimport { genderOptions } from \"../../../app/common/options/genderOptions\";\r\nimport { Patient } from \"../../../app/models/patient\";\r\n\r\nexport default observer(function PatientForm() {\r\n  const { patientStore } = useStore();\r\n  const { createPatient, selectedPatient, closeForm, updatePatient, loading} = patientStore;\r\n   \r\n  \r\n  const initialState = selectedPatient ?? {\r\n    id: \"\",\r\n    full_Name: \"\",\r\n    birthday: null,\r\n    gender: \"\",\r\n    phone_Number:0,\r\n    email: \"\",\r\n    address:\"\",\r\n    \r\n  };\r\n\r\n  const validationSchema=Yup.object({\r\n  \r\n    full_Name: Yup.string().required(),\r\n    birthday: Yup.string().required('Ju lutem vendosni ditelindjen').nullable(),\r\n    gender: Yup.string().required(),\r\n    phone_Number: Yup.number().required(),\r\n    email: Yup.string().required(),\r\n    address: Yup.string().required()\r\n    \r\n  })\r\n  const [patient] = useState(initialState);\r\n\r\n  function handleFormSubmit(patient: Patient) {\r\n     patient.id ? updatePatient(patient) : createPatient(patient);\r\n   }\r\n\r\n\r\n  return (\r\n    <Segment clearing>\r\n      <Formik \r\n      validationSchema={validationSchema}\r\n      enableReinitialize\r\n      initialValues={patient}\r\n      onSubmit={values => handleFormSubmit(values)}>\r\n        {({handleSubmit, isValid, isSubmitting, dirty}) =>(\r\n    <Form  className='ui form' onSubmit={handleSubmit} >\r\n<MyTextInput  name=\"Emri dhe Mbiemri\" placeholder=\"Full_Name\"/>\r\n<MyDateInput\r\n          placeholderText=\"Ditelindja\"\r\n          name=\"date\"\r\n          showTimeSelect\r\n          timeCaption='time'\r\n          dateFormat='dd.MM.yyyy, (h:mm aa)'\r\n        />\r\n<MySelectInput options={genderOptions} placeholder=\"Gjinia\" name=\"gender\"/>\r\n<MyTextInput placeholder=\"Numri i telefonit\" name=\"phone_Number\"/>\r\n<MyTextInput placeholder=\"Email-i\" name=\"email\"/>\r\n<MyTextInput\r\n  placeholder=\"Adresa\" name=\"address\"/>\r\n<Button\r\ndisabled={isSubmitting || !dirty || !isValid}\r\n  loading={loading}\r\n  floated=\"right\"\r\n  positive\r\n  type=\"submit\"\r\n  content=\"Submit\"\r\n/>\r\n<Button\r\n onClick={closeForm}\r\n  to=\"/patients\"\r\n  floated=\"right\"\r\n  type=\"button\"\r\n  content=\"Cancel\"\r\n/>\r\n</Form>\r\n        )}\r\n      </Formik>\r\n      \r\n    </Segment>\r\n  );\r\n});\r\n","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\api\\agent.ts",["168"],"import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Country } from \"../models/country\";\r\nimport { Patient } from \"../models/patient\";\r\nimport { Test } from \"../models/test\";\r\nimport { history } from \"../../index\";\r\nimport { storeAnnotation } from \"mobx/dist/internal\";\r\nimport { store } from \"../stores/store\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\n\r\nconst sleep = (delay: number) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, delay);\r\n  });\r\n};\r\n\r\naxios.defaults.baseURL = \"http://localhost:5000/api\";\r\n\r\naxios.interceptors.request.use(config => {\r\n  const token=store.commonStore.token;\r\n  if(token) config.headers.Authorization = `Bearer ${token}`\r\n  return config;\r\n})\r\n\r\naxios.interceptors.response.use(\r\n  async (response) => {\r\n    // try {\r\n    await sleep(700);\r\n    return response;\r\n  },\r\n  (error: AxiosError) => {\r\n    const { data, status, config } = error.response!;\r\n\r\n    switch (status) {\r\n      case 400:\r\n        if (typeof data === \"string\") {\r\n          toast.error(data);\r\n        }\r\n\r\n        if (config.method === \"get\" && data.errors.hasOwnProperty(\"id\")) {\r\n          history.push(\"/not-found\");\r\n        }\r\n\r\n        if (data.errors) {\r\n          const modalStateErrors = [];\r\n\r\n          for (const error in data.errors) {\r\n            if (data.errors[error]) {\r\n              modalStateErrors.push(data.errors[error]);\r\n            }\r\n          }\r\n\r\n          throw modalStateErrors.flat();\r\n        }\r\n\r\n        break;\r\n      case 401:\r\n        toast.error(\"unauthorized\");\r\n        break;\r\n      case 404:\r\n        history.push(\"not-found\");\r\n        break;\r\n      case 500:\r\n        store.commonStore.setServerError(data);\r\n        history.push(\"/server-error\");\r\n        break;\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n  get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n  post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n  put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n  del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n};\r\n\r\nconst Tests = {\r\n  list: () => requests.get<Test[]>(\"/tests\"),\r\n  details: (id: string) => requests.get<Test>(`/tests/${id}`),\r\n  create: (test: Test) => axios.post<void>(\"/tests\", test),\r\n  update: (test: Test) => axios.put<void>(`/tests/${test.id}`, test),\r\n  delete: (id: string) => axios.delete<void>(`/tests/${id}`),\r\n};\r\n\r\nconst Countries = {\r\n  list: () => requests.get<Country[]>(\"/countries\"),\r\n  details: (id: string) => requests.get<Country>(`/countries/${id}`),\r\n  create: (country: Country) => axios.post<void>(\"/countries\", country),\r\n  update: (country: Country) =>\r\n    axios.put<void>(`/countries/${country.id}`, test),\r\n  delete: (id: string) => axios.delete<void>(`/countries/${id}`),\r\n};\r\n\r\nconst Patients = {\r\n  list: () => requests.get<Patient[]>(\"/patients\"),\r\n  details: (id: string) => requests.get<Patient>(`/patients/${id}`),\r\n  create: (patient: Patient) => axios.post<void>(\"/patients\", patient),\r\n  update: (patient: Patient) => axios.put<void>(`/patients/${patient.id}`, patient),\r\n  delete: (id: string) => axios.delete<void>(`/patients/${id}`),\r\n};\r\n\r\nconst Account={\r\n  currnet:()=> requests.get<User>('/account'),\r\n  login:(user: UserFormValues) => requests.post<User>('/account/login', user),\r\n  register:(user:UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst agent = {\r\n  Tests,\r\n  Countries,\r\n  Patients,\r\n  Account\r\n};\r\n\r\nexport default agent;\r\n","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\errors\\ValidationErrors.tsx",["169"],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\stats\\CountryList.tsx",["170"],"import React, { useEffect, useState } from \"react\";\r\nimport { Item, Statistic } from \"semantic-ui-react\";\r\nimport agent from \"../../app/api/agent\";\r\nimport { Country } from \"../../app/models/country\";\r\n\r\nexport default function CountryList() {\r\n  const [countries, setCountries] = useState<Country[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // if (loading) return <LoadingComponent content=\"Loading app\" />;\r\n\r\n  useEffect(() => {\r\n    agent.Countries.list().then((response) => {\r\n      let countries: Country[] = [];\r\n      response.forEach((country) => {\r\n        // test.date = test.date.split(\"T\")[0];\r\n        countries.push(country);\r\n      });\r\n      setCountries(countries);\r\n      setLoading(false);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Item.Group divided>\r\n      {countries.map((country) => (\r\n        <Item key={country.id}>\r\n          <Item.Content>\r\n            <Item.Header as=\"a\">{country.name}</Item.Header>\r\n            <Item.Description>\r\n              <Statistic>\r\n                <Statistic.Value>{country.infections}</Statistic.Value>\r\n                <Statistic.Label>Infektime</Statistic.Label>\r\n              </Statistic>\r\n              <Statistic>\r\n                <Statistic.Value>{country.deaths}</Statistic.Value>\r\n                <Statistic.Label>Vdekje</Statistic.Label>\r\n              </Statistic>\r\n              <Statistic>\r\n                <Statistic.Value>{country.recoveries}</Statistic.Value>\r\n                <Statistic.Label>Rikuperime</Statistic.Label>\r\n              </Statistic>\r\n              <Statistic>\r\n                <Statistic.Value>{country.vaccinated}</Statistic.Value>\r\n                <Statistic.Label>Vaksinime</Statistic.Label>\r\n              </Statistic>\r\n\r\n              {/* <div>Infections: {country.infections}</div>\r\n              <div>Deaths: {country.deaths}</div>\r\n              <div>Recoveries: {country.recoveries}</div>\r\n              <div>Vaccinated: {country.vaccinated}</div> */}\r\n            </Item.Description>\r\n            <Item.Extra>\r\n              {/* <Button floated=\"right\" content=\"View\" color=\"blue\" />\r\n                <Button floated=\"right\" content=\"Delete\" color=\"red\" /> */}\r\n            </Item.Extra>\r\n          </Item.Content>\r\n        </Item>\r\n      ))}\r\n    </Item.Group>\r\n  );\r\n}\r\n","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\layout\\LoadingComponent.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\tests\\dashboard\\TestList.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\patients\\dashboard\\PatientList.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\tests\\details\\TestDetails.tsx",["171"],"import { format } from \"date-fns\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Card, Image } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default function TestDetails() {\r\n  const { testStore } = useStore();\r\n  const { selectedTest: test, openForm, cancelSelectedTest } = testStore;\r\n\r\n  if (!test) return <LoadingComponent />;\r\n\r\n  return (\r\n    <Card fluid>\r\n      <Image src={`/assets/categoryImages/${test.variation}.jpg`} />\r\n      <Card.Content>\r\n        <Card.Header>{test.description}</Card.Header>\r\n        <Card.Meta>\r\n          <span>{format (test.date!, 'dd.MM.yyyy, (h:mm aa)')}</span>\r\n        </Card.Meta>\r\n        <Card.Description>{test.description}</Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <Button.Group widths=\"2\">\r\n          <Button \r\n            onClick={() => openForm(test.id)}\r\n            basic\r\n            color=\"blue\"\r\n            content=\"Edit\"\r\n          />\r\n          <Button \r\n            onClick={cancelSelectedTest}\r\n            basic\r\n            color=\"grey\"\r\n            content=\"Cancel\"\r\n          />\r\n        </Button.Group>\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n}\r\n","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\tests\\form\\TestForm.tsx",["172","173"],"import { Formik, Form, ErrorMessage, validateYupSchema } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { useState } from \"react\";\r\nimport { Button, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport * as Yup from  'yup';\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport { variationOptions } from \"../../../app/common/options/variationOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { Test } from \"../../../app/models/test\";\r\n\r\nexport default observer(function TestForm() {\r\n  const { testStore } = useStore();\r\n  const { selectedTest, closeForm, createTest, updateTest, loading } =\r\n    testStore;\r\n\r\n  const initialState = selectedTest ?? {\r\n    id: \"\",\r\n    patientId: 0,\r\n    date: null,\r\n    description: \"\",\r\n    hospitalId: 0,\r\n    vaccineId: 0,\r\n    variation: \"\",\r\n  };\r\n\r\n  const validationSchema=Yup.object({\r\n  \r\n    patientId: Yup.number().required(),\r\n    date: Yup.string().required('Ju lutem vendosni nje date').nullable(),\r\n    description: Yup.string().required(),\r\n    hospitalId: Yup.number().required(),\r\n    vaccineId: Yup.number().required(),\r\n    variation: Yup.string().required()\r\n  })\r\n  const [test] = useState(initialState);\r\n\r\n  function handleFormSubmit(test: Test) {\r\n     test.id ? updateTest(test) : createTest(test);\r\n   }\r\n\r\n  \r\n\r\n  return (\r\n    <Segment clearing>\r\n      <Formik \r\n      validationSchema={validationSchema}\r\n      enableReinitialize \r\n      initialValues={test} \r\n      onSubmit={values =>  handleFormSubmit(values)}>        \r\n      {({handleSubmit, isValid, isSubmitting, dirty}) => (\r\n          <Form className='ui form' onSubmit={handleSubmit}>\r\n            <MyTextInput name='patientId' placeholder='PatientID'/>\r\n        <MyDateInput\r\n          placeholderText=\"Date\"\r\n          name=\"date\"\r\n          showTimeSelect\r\n          timeCaption='time'\r\n          dateFormat='dd.MM.yyyy, (h:mm aa)'\r\n        />\r\n       \r\n        <MyTextArea rows={3}\r\n          placeholder=\"Description\"\r\n          name=\"description\"\r\n        />\r\n     \r\n          <MyTextInput\r\n            placeholder=\"Hospital ID\"\r\n            name=\"hospitalId\"\r\n          />\r\n          <MyTextInput\r\n            placeholder=\"Vaccine ID\"\r\n            name=\"vaccineId\"\r\n          />\r\n        <MySelectInput options={variationOptions}\r\n          placeholder=\"Variation\"\r\n          name=\"variation\"\r\n        />\r\n        <Button\r\n        disabled={isSubmitting || !dirty || !isValid}\r\n          loading={loading}\r\n          floated=\"right\"\r\n          positive\r\n          type=\"submit\"\r\n          content=\"Submit\"\r\n        />\r\n        <Button\r\n          onClick={closeForm}\r\n          floated=\"right\"\r\n          type=\"button\"\r\n          content=\"Cancel\"\r\n        />\r\n</Form>\r\n        )}\r\n        </Formik>\r\n    </Segment>\r\n  );\r\n});\r\n","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\form\\MyTextInput.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\form\\MyTextArea.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\form\\MySelectInput.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\options\\variationOptions.ts",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\form\\MyDateInput.tsx",["174"],"import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\ninterface Props{\r\n    placeholder: string;\r\n    name:string;\r\n    label?: string;\r\n    \r\n}\r\n\r\n\r\n\r\nexport default function MyDateInput(props: Partial <ReactDatePickerProps>){\r\n    const [field, meta, helpers]=useField(props.name!);\r\n    return(\r\n\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n            {...field}\r\n            {...props}\r\n            selected={(field.value && new Date(field.value)) || null}\r\n            onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ): null}\r\n        </Form.Field>\r\n    )\r\n\r\n   \r\n}","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\models\\test.ts",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\options\\genderOptions.ts",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\patients\\details\\PatientDetails.tsx",["175","176"],"import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { Button, Card, Image } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { format } from \"date-fns\";\r\n\r\nexport default observer(function PatientDetails() {\r\n  const { patientStore } = useStore();\r\n  const {\r\n    selectedPatient: patient,\r\n    loadPatient,\r\n    loadingInitial,\r\n    openForm,\r\n    cancelSelectedPatient\r\n  } = patientStore;\r\n  const { id } = useParams<{ id: string }>();\r\n\r\n  useEffect(() => {\r\n    if (id) loadPatient(id);\r\n  }, [id, loadPatient]);\r\n\r\n  if (loadingInitial || !patient) return <LoadingComponent />;\r\n  return (\r\n    <Card fluid>\r\n     {/* <Image src={`/assets/categoryImages/${patient.phone_Number}.jpg`} /> */}\r\n      <Card.Content>\r\n        <Card.Header>{patient.full_Name}</Card.Header>\r\n        <Card.Meta>\r\n          <span>{format (patient.birthday!, 'dd.MM.yyyy, (h:mm aa)')}</span>\r\n        </Card.Meta>\r\n        <Card.Description>{patient.gender}</Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n      <Button.Group widths=\"2\">\r\n          <Button \r\n            onClick={() => openForm(patient.id)}\r\n            basic\r\n            color=\"blue\"\r\n            content=\"Edit\"\r\n          />\r\n          <Button \r\n            onClick={cancelSelectedPatient}\r\n            basic\r\n            color=\"grey\"\r\n            content=\"Cancel\"\r\n          />\r\n        </Button.Group>\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n});\r\n","D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\users\\LoginForm.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\stores\\userStore.ts",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\users\\LoginPage.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\stores\\modalStore.ts",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\app\\common\\modals\\ModalContainer.tsx",[],"D:\\UBT\\viti II\\semestri 4\\lab kurs\\Project\\lab1\\client\\src\\features\\users\\RegisterForm.tsx",["177"],{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","severity":1,"message":"183","line":4,"column":10,"nodeType":"184","messageId":"185","endLine":4,"endColumn":16},{"ruleId":"182","severity":1,"message":"186","line":9,"column":24,"nodeType":"184","messageId":"185","endLine":9,"endColumn":36},{"ruleId":"182","severity":1,"message":"187","line":9,"column":38,"nodeType":"184","messageId":"185","endLine":9,"endColumn":55},{"ruleId":"182","severity":1,"message":"188","line":7,"column":10,"nodeType":"184","messageId":"185","endLine":7,"endColumn":25},{"ruleId":"189","severity":1,"message":"190","line":13,"column":42,"nodeType":"191","messageId":"192","endLine":13,"endColumn":44},{"ruleId":"182","severity":1,"message":"193","line":8,"column":10,"nodeType":"184","messageId":"185","endLine":8,"endColumn":17},{"ruleId":"182","severity":1,"message":"194","line":3,"column":10,"nodeType":"184","messageId":"185","endLine":3,"endColumn":14},{"ruleId":"182","severity":1,"message":"186","line":1,"column":24,"nodeType":"184","messageId":"185","endLine":1,"endColumn":36},{"ruleId":"182","severity":1,"message":"187","line":1,"column":38,"nodeType":"184","messageId":"185","endLine":1,"endColumn":55},{"ruleId":"182","severity":1,"message":"195","line":6,"column":11,"nodeType":"184","messageId":"185","endLine":6,"endColumn":16},{"ruleId":"182","severity":1,"message":"194","line":3,"column":10,"nodeType":"184","messageId":"185","endLine":3,"endColumn":14},{"ruleId":"182","severity":1,"message":"196","line":4,"column":24,"nodeType":"184","messageId":"185","endLine":4,"endColumn":29},{"ruleId":"182","severity":1,"message":"197","line":4,"column":26,"nodeType":"184","messageId":"185","endLine":4,"endColumn":31},"no-native-reassign",["198"],"no-negated-in-lhs",["199"],"@typescript-eslint/no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'ErrorMessage' is defined but never used.","'validateYupSchema' is defined but never used.","'storeAnnotation' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'loading' is assigned a value but never used.","'Link' is defined but never used.","'Props' is defined but never used.","'Image' is defined but never used.","'Label' is defined but never used.","no-global-assign","no-unsafe-negation"]