[{"/home/bleart/projects/lab1/client/src/index.tsx":"1","/home/bleart/projects/lab1/client/src/reportWebVitals.ts":"2","/home/bleart/projects/lab1/client/src/app/stores/store.ts":"3","/home/bleart/projects/lab1/client/src/app/layout/App.tsx":"4","/home/bleart/projects/lab1/client/src/app/stores/testStore.ts":"5","/home/bleart/projects/lab1/client/src/app/layout/NavBar.tsx":"6","/home/bleart/projects/lab1/client/src/features/home/HomePage.tsx":"7","/home/bleart/projects/lab1/client/src/features/tests/dashboard/TestDashboard.tsx":"8","/home/bleart/projects/lab1/client/src/features/stats/CountryDashboard.tsx":"9","/home/bleart/projects/lab1/client/src/app/api/agent.ts":"10","/home/bleart/projects/lab1/client/src/app/layout/LoadingComponent.tsx":"11","/home/bleart/projects/lab1/client/src/features/tests/dashboard/TestList.tsx":"12","/home/bleart/projects/lab1/client/src/features/stats/CountryList.tsx":"13","/home/bleart/projects/lab1/client/src/features/tests/details/TestDetails.tsx":"14","/home/bleart/projects/lab1/client/src/features/tests/form/TestForm.tsx":"15","/home/bleart/projects/lab1/client/src/app/stores/patientStore.ts":"16","/home/bleart/projects/lab1/client/src/features/patients/dashboard/PatientDashboard.tsx":"17","/home/bleart/projects/lab1/client/src/features/patients/dashboard/PatientList.tsx":"18"},{"size":741,"mtime":1620935648356,"results":"19","hashOfConfig":"20"},{"size":425,"mtime":1607152858000,"results":"21","hashOfConfig":"20"},{"size":424,"mtime":1621456078396,"results":"22","hashOfConfig":"20"},{"size":877,"mtime":1621456132318,"results":"23","hashOfConfig":"20"},{"size":2674,"mtime":1620935648356,"results":"24","hashOfConfig":"20"},{"size":963,"mtime":1621456480870,"results":"25","hashOfConfig":"20"},{"size":217,"mtime":1621451387217,"results":"26","hashOfConfig":"20"},{"size":1282,"mtime":1621451387217,"results":"27","hashOfConfig":"20"},{"size":141,"mtime":1620935648356,"results":"28","hashOfConfig":"20"},{"size":2114,"mtime":1621457269084,"results":"29","hashOfConfig":"20"},{"size":370,"mtime":1607152858000,"results":"30","hashOfConfig":"20"},{"size":1740,"mtime":1620935648356,"results":"31","hashOfConfig":"20"},{"size":1561,"mtime":1621456759098,"results":"32","hashOfConfig":"20"},{"size":1153,"mtime":1620661818632,"results":"33","hashOfConfig":"20"},{"size":2106,"mtime":1621457191566,"results":"34","hashOfConfig":"20"},{"size":3364,"mtime":1621455607814,"results":"35","hashOfConfig":"20"},{"size":848,"mtime":1621455607814,"results":"36","hashOfConfig":"20"},{"size":2020,"mtime":1621455607814,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"vkc3pu",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"/home/bleart/projects/lab1/client/src/index.tsx",[],["80","81"],"/home/bleart/projects/lab1/client/src/reportWebVitals.ts",[],"/home/bleart/projects/lab1/client/src/app/stores/store.ts",[],"/home/bleart/projects/lab1/client/src/app/layout/App.tsx",[],"/home/bleart/projects/lab1/client/src/app/stores/testStore.ts",[],"/home/bleart/projects/lab1/client/src/app/layout/NavBar.tsx",["82"],"import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Button, Container, Menu } from \"semantic-ui-react\";\nimport { useStore } from \"../stores/store\";\n\nexport default function NavBar() {\n  const { testStore } = useStore();\n\n  return (\n    <Menu pointing widths={10}>\n      <Container>\n        <Menu.Item as={NavLink} to=\"/\" exact>\n          <img\n            src=\"/assets/logo.png\"\n            alt=\"logo\"\n            style={{ marginRight: \"5px\" }}\n          />\n        </Menu.Item>\n        <Menu.Item as={NavLink} to=\"/tests\" name=\"Testet\" exact />\n        <Menu.Item as={NavLink} to=\"/countries\" name=\"Statistikat\" />\n        <Menu.Item as={NavLink} to=\"/patients\" name=\"Pacientet\" />\n        <Menu.Item name=\"Profile\" />\n        <Menu.Item position={\"right\"}>\n          <Button content=\"Login\" />\n        </Menu.Item>\n        <Menu.Item>\n          <Button content=\"Register\" />\n        </Menu.Item>\n      </Container>\n    </Menu>\n  );\n}\n","/home/bleart/projects/lab1/client/src/features/home/HomePage.tsx",[],"/home/bleart/projects/lab1/client/src/features/tests/dashboard/TestDashboard.tsx",["83"],"import { observer } from \"mobx-react-lite\";\nimport React, { useEffect } from \"react\";\nimport { Button, Grid, Segment } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { useStore } from \"../../../app/stores/store\";\nimport TestDetails from \"../details/TestDetails\";\nimport TestForm from \"../form/TestForm\";\nimport TestList from \"./TestList\";\n\nexport default observer(function TestDashboard() {\n  const { testStore } = useStore();\n  const { selectedTest, editMode } = testStore;\n\n  useEffect(() => {\n    testStore.loadTests();\n  }, [testStore]); // side-effect runs when any dependecy values changes\n\n  if (testStore.loadingIntial)\n    return <LoadingComponent content=\"Loading app\" />;\n\n  // set the app's title\n  // TODO: find a better way to do this\n  document.title = \"lab1\";\n\n  return (\n    <>\n      <Button\n        onClick={() => testStore.openForm()}\n        primary\n        content=\"Create a Test\"\n        style={{ marginBottom: \"1.4rem\" }}\n      />\n      <Grid>\n        <Grid.Column width=\"12\">\n          {selectedTest && !editMode && <TestDetails />}\n          {editMode && <TestForm />}\n        </Grid.Column>\n        <Grid.Column width=\"12\">\n          <TestList />\n        </Grid.Column>\n      </Grid>\n    </>\n  );\n});\n","/home/bleart/projects/lab1/client/src/features/stats/CountryDashboard.tsx",[],"/home/bleart/projects/lab1/client/src/app/api/agent.ts",["84"],"import axios, { AxiosResponse } from \"axios\";\nimport { count } from \"console\";\nimport { Country } from \"../models/country\";\nimport { Patient } from \"../models/patient\";\nimport { Test } from \"../models/test\";\n\nconst sleep = (delay: number) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, delay);\n  });\n};\n\naxios.defaults.baseURL = \"http://localhost:5000/api\";\n\naxios.interceptors.response.use(async (response) => {\n  try {\n    await sleep(700);\n    return response;\n  } catch (error) {\n    console.log(error);\n    return await Promise.reject(error);\n  }\n});\n\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n  get: <T>(url: string) => axios.get<T>(url).then(responseBody),\n  post: <T>(url: string, body: {}) =>\n    axios.post<T>(url, body).then(responseBody),\n  put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n  del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\n};\n\nconst Tests = {\n  list: () => requests.get<Test[]>(\"/tests\"),\n  details: (id: string) => requests.get<Test>(`/tests/${id}`),\n  create: (test: Test) => axios.post<void>(\"/tests\", test),\n  update: (test: Test) => axios.put<void>(`/tests/${test.id}`, test),\n  delete: (id: string) => axios.delete<void>(`/tests/${id}`),\n};\n\nconst Countries = {\n  list: () => requests.get<Country[]>(\"/countries\"),\n  details: (id: string) => requests.get<Country>(`/countries/${id}`),\n  create: (country: Country) => axios.post<void>(\"/countries\", country),\n  update: (country: Country) =>\n    axios.put<void>(`/countries/${country.id}`, test),\n  delete: (id: string) => axios.delete<void>(`/countries/${id}`),\n};\n\nconst Patients = {\n  list: () => requests.get<Patient[]>(\"/patients\"),\n  details: (id: string) => requests.get<Patient>(`/patients/${id}`),\n  create: (patient: Patient) => requests.post<void>(\"/patients\", patient),\n  update: (patient: Patient) =>\n    axios.put<void>(`/patients/${patient.id}`, patient),\n  delete: (id: string) => axios.delete<void>(`/patients/${id}`),\n};\n\nconst agent = {\n  Tests,\n  Countries,\n  Patients,\n};\n\nexport default agent;\n","/home/bleart/projects/lab1/client/src/app/layout/LoadingComponent.tsx",[],"/home/bleart/projects/lab1/client/src/features/tests/dashboard/TestList.tsx",[],"/home/bleart/projects/lab1/client/src/features/stats/CountryList.tsx",["85","86","87","88","89","90"],"import React, { useEffect, useState } from \"react\";\nimport { Button, Item, ItemMeta, Label, Segment } from \"semantic-ui-react\";\nimport agent from \"../../app/api/agent\";\nimport { Country } from \"../../app/models/country\";\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\n\nexport default function CountryList() {\n  const [countries, setCountries] = useState<Country[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    agent.Countries.list().then((response) => {\n      let countries: Country[] = [];\n      response.forEach((country) => {\n        // test.date = test.date.split(\"T\")[0];\n        countries.push(country);\n      });\n      setCountries(countries);\n      setLoading(false);\n    });\n  }, []);\n\n  return (\n    <Item.Group divided>\n      {countries.map((country) => (\n        <Item key={country.id}>\n          <Item.Content>\n            <Item.Header as=\"a\">{country.name}</Item.Header>\n            {/* <Item.Meta>{country.deaths}</Item.Meta> */}\n            <Item.Description>\n              <div>Infections: {country.infections}</div>\n              <div>Deaths: {country.deaths}</div>\n              <div>Recoveries: {country.recoveries}</div>\n              <div>Vaccinated: {country.vaccinated}</div>\n            </Item.Description>\n            <Item.Extra>\n              {/* <Button floated=\"right\" content=\"View\" color=\"blue\" />\n                <Button floated=\"right\" content=\"Delete\" color=\"red\" /> */}\n            </Item.Extra>\n          </Item.Content>\n        </Item>\n      ))}\n    </Item.Group>\n  );\n}\n","/home/bleart/projects/lab1/client/src/features/tests/details/TestDetails.tsx",[],"/home/bleart/projects/lab1/client/src/features/tests/form/TestForm.tsx",[],"/home/bleart/projects/lab1/client/src/app/stores/patientStore.ts",["91"],"import {makeAutoObservable, runInAction} from \"mobx\";\nimport { Patient } from \"../models/patient\";\nimport agent from \"../api/agent\";\n\nexport default class PatientStore{\npatientRegistry=new Map<string, Patient>();\nselectedPatient: Patient | undefined=undefined;\neditMode=false;\nloading=false;\nloadingInitial=true;\n\n    constructor(){\n        makeAutoObservable(this)\n    }\n\n    get patientsByDate(){\n        return Array.from(this.patientRegistry.values()).sort((a,b)=> \n        Date.parse(a.birthday)- Date.parse(b.birthday));\n    }\n\n    loadPatients= async() => {\n        this.loadingInitial=true;\n        try{\n            const patients =await agent.Patients.list();\n                    patients.forEach(patient=> {\n                    this.setPatient(patient);\n\n                })            \n            this.setLoadingInitial(false);            \n        }catch (error){\n            console.log(error);\n          \n                this.setLoadingInitial(false);\n           \n            \n        }\n    }\n\n    loadPatient=async(id:string)=>{\n        let patient= this.getPatient(id);\n\n        if(patient){\n            this.selectedPatient=patient;\n            return patient;\n        }else{\n            this.loadingInitial=true;\n            try{\n                patient=await agent.Patients.details(id);\n                this.setPatient(patient);\n                runInAction(() => {\n                    this.selectedPatient=(patient);\n\n                })\n                this.setLoadingInitial(false);\n                return patient;\n\n\n            }catch(error){\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n\n        }\n    }\n\n    private setPatient=(patient: Patient)=>{\n        patient.birthday=patient.birthday;\n                    this.patientRegistry.set(patient.id, patient);\n    }\n\n    private getPatient=(id:string)=>{\n        return this.patientRegistry.get(id);\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    createPatient=async (patient: Patient) => {\n        this.loading =true;\n        try{\n\n            await agent.Patients.create(patient);\n            runInAction(() => {\n                this.patientRegistry.set(patient.id, patient);\n                this.selectedPatient=patient;\n                this.editMode=false;\n                this.loading=false;\n            })\n\n        }catch(error){\n            console.log(error);\n            runInAction(() => {\n                this.loading=false;\n\n        })\n    }\n  }\n  updatePatient=async (patient: Patient) => {\n    this.loading =true;\n    try{\n\n        await agent.Patients.update(patient);\n        runInAction(() => {\n            this.patientRegistry.set(patient.id, patient);\n            this.selectedPatient=patient;\n            this.editMode=false;\n            this.loading=false;\n        })\n\n    }catch(error){\n        console.log(error);\n        runInAction(() => {\n            this.loading=false;\n\n         })\n      } \n   }\n\n   deletePatient= async (id: string) => {\n    this.loading =true;\n    try{\n\n        await agent.Patients.delete(id);\n        runInAction(() => {\n          this.patientRegistry.delete(id);  \n            this.loading=false;\n        })\n\n    }catch(error){\n        console.log(error);\n        runInAction(() => {\n            this.loading=false;\n\n         })\n   }\n}\n}","/home/bleart/projects/lab1/client/src/features/patients/dashboard/PatientDashboard.tsx",[],"/home/bleart/projects/lab1/client/src/features/patients/dashboard/PatientList.tsx",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":7,"column":11,"nodeType":"98","messageId":"99","endLine":7,"endColumn":20},{"ruleId":"96","severity":1,"message":"100","line":3,"column":24,"nodeType":"98","messageId":"99","endLine":3,"endColumn":31},{"ruleId":"96","severity":1,"message":"101","line":2,"column":10,"nodeType":"98","messageId":"99","endLine":2,"endColumn":15},{"ruleId":"96","severity":1,"message":"102","line":2,"column":10,"nodeType":"98","messageId":"99","endLine":2,"endColumn":16},{"ruleId":"96","severity":1,"message":"103","line":2,"column":24,"nodeType":"98","messageId":"99","endLine":2,"endColumn":32},{"ruleId":"96","severity":1,"message":"104","line":2,"column":34,"nodeType":"98","messageId":"99","endLine":2,"endColumn":39},{"ruleId":"96","severity":1,"message":"100","line":2,"column":41,"nodeType":"98","messageId":"99","endLine":2,"endColumn":48},{"ruleId":"96","severity":1,"message":"105","line":5,"column":8,"nodeType":"98","messageId":"99","endLine":5,"endColumn":24},{"ruleId":"96","severity":1,"message":"106","line":9,"column":10,"nodeType":"98","messageId":"99","endLine":9,"endColumn":17},{"ruleId":"107","severity":1,"message":"108","line":67,"column":26,"nodeType":"109","messageId":"110","endLine":67,"endColumn":42},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"@typescript-eslint/no-unused-vars","'testStore' is assigned a value but never used.","Identifier","unusedVar","'Segment' is defined but never used.","'count' is defined but never used.","'Button' is defined but never used.","'ItemMeta' is defined but never used.","'Label' is defined but never used.","'LoadingComponent' is defined but never used.","'loading' is assigned a value but never used.","no-self-assign","'patient.birthday' is assigned to itself.","MemberExpression","selfAssignment","no-global-assign","no-unsafe-negation"]